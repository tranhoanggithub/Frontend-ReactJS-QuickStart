{"ast":null,"code":"import { getAllCodeService, createNewUserService, getAllUsers, deleteUserService, editUserService, getTopDoctorHomeService, getAllDoctors, saveDetailDoctorService } from '../../services/userService';\nimport actionTypes from './actionTypes';\nimport { toast } from \"react-toastify\"; // export const fetchGenderStart = () => ({\n//     type: actionTypes.FETCH_GENDER_START\n// })\n\nexport const fetchGenderStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_GENDER_START\n      });\n      let res = await getAllCodeService(\"GENDER\");\n      console.log('xxxxxxxxxxxxres cua fetchGenderStart la', res);\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchGenderSuccess(res.data));\n      } else {\n        dispatch(fetchGenderFailed());\n      }\n    } catch (e) {\n      dispatch(fetchGenderFailed());\n      console.log('fetchGenderStart error', e);\n    }\n  };\n}; // type: actionTypes.FETCH_GENDER_START\n\nexport const fetchGenderSuccess = genderData => ({\n  type: actionTypes.FETCH_GENDER_SUCCESS,\n  data: genderData\n});\nexport const fetchGenderFailed = () => ({\n  type: actionTypes.FETCH_GENDER_FAIDED\n});\nexport const fetchPositionSuccess = positionData => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS,\n  data: positionData\n});\nexport const fetchPositionFailed = () => ({\n  type: actionTypes.FETCH_POSITION_FAILDED\n}); //start doing end\n\nexport const fetchRoleSuccess = roleData => ({\n  type: actionTypes.FETCH_ROLE_SUCCESS,\n  data: roleData\n});\nexport const fetchRoleFailed = () => ({\n  type: actionTypes.FETCH_POSITION_SUCCESS\n});\nexport const fetchPositionStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"POSITION\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchPositionSuccess(res.data));\n      } else {\n        dispatch(fetchPositionFailed());\n      }\n    } catch (e) {\n      dispatch(fetchPositionFailed());\n      console.log('fetchGenderStart error', e);\n    }\n  };\n};\nexport const fetchRoleStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"ROLE\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchRoleSuccess(res.data));\n      } else {\n        dispatch(fetchRoleFailed());\n      }\n    } catch (e) {\n      dispatch(fetchPositionFailed());\n      console.log('fetchRole error', e);\n    }\n  };\n};\nexport const createNewUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await createNewUserService(data);\n      console.log('check create user redux', res);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Create a new user succeed!\");\n        dispatch(saveUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        dispatch(saveUserFailed());\n      }\n    } catch (e) {\n      dispatch(saveUserFailed());\n      console.log('fetchRole error', e);\n    }\n  };\n};\nexport const saveUserSuccess = () => ({\n  type: 'CREATE_USER_SUCCESS'\n});\nexport const saveUserFailed = () => ({\n  type: 'CREATE_USER_FAILDED'\n});\nexport const fetchAllUsersStart = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllUsers(\"ALL\");\n\n      if (res && res.errCode === 0) {\n        dispatch(fetchAllUsersSuccess(res.users.reverse()));\n      } else {\n        toast.error(\"Fetch all user error!\");\n        dispatch(fetchAllUsersFailed());\n      }\n    } catch (e) {\n      toast.error(\"Fetch all user error!\");\n      dispatch(fetchAllUsersFailed());\n      console.log('fetchAllUsersFailed error', e);\n    }\n  };\n};\nexport const fetchAllUsersSuccess = data => ({\n  type: actionTypes.FETCH_ALL_USERS_SUCCESS,\n  users: data\n});\nexport const fetchAllUsersFailed = () => ({\n  type: actionTypes.FETCH_ALL_USERS_FAILDED\n});\nexport const deleteAUser = userId => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await deleteUserService(userId);\n      console.log('check create user redux', res);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Delete the  user succeed!\");\n        dispatch(deleteUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error(\"Delete the  user error\");\n        dispatch(deleteUserFailed());\n      }\n    } catch (e) {\n      dispatch(saveUserFailed());\n      console.log('fetchRole error', e);\n    }\n  };\n};\nexport const deleteUserSuccess = () => ({\n  type: actionTypes.DELETE_USER_SUCCESS\n});\nexport const deleteUserFailed = () => ({\n  type: actionTypes.DELETE_USER_FAILDED\n});\nexport const editAUser = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await editUserService(data);\n      console.log('check create user redux', res);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Update the  user succeed!\");\n        dispatch(editUserSuccess());\n        dispatch(fetchAllUsersStart());\n      } else {\n        toast.error(\"Update the user error\");\n        dispatch(editUserFailed());\n      }\n    } catch (e) {\n      toast.error(\"Update the user error!\");\n      dispatch(editUserFailed());\n      console.log('EditUserFailed error', e);\n    }\n  };\n};\nexport const editUserSuccess = () => ({\n  type: actionTypes.EDIT_USER_SUCCESS\n});\nexport const editUserFailed = () => ({\n  type: actionTypes.EDIT_USER_FAILDED\n}); // let res1 = await getTopDoctorHomeService(3);\n\nexport const fetchTopDoctor = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getTopDoctorHomeService('');\n      console.log(\"5555555555555555\", res);\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\n          dataDoctors: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_TOP_DOCTORS_FAILDER\n        });\n      }\n    } catch (e) {\n      console.log('FETCH_TOP_DOCTORS_FAILDED', e);\n      dispatch({\n        type: actionTypes.FETCH_TOP_DOCTORS_FAILDER\n      });\n    }\n  };\n};\nexport const fetchAllDoctors = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllDoctors();\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTORS_SUCCESS,\n          dataDr: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALL_DOCTORS_FAILDER\n        });\n      }\n    } catch (e) {\n      console.log('FETCH_ALL_DOCTORS_FAILDED', e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_DOCTORS_FAILDER\n      });\n    }\n  };\n};\nexport const saveDetailDoctor = data => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await saveDetailDoctorService(data);\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Save Infor Detail Doctor the user succeed!\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS\n        });\n      } else {\n        toast.error(\"Save Infor Detail Doctor error\");\n        dispatch({\n          type: actionTypes.SAVE_DETAIL_DOCTOR_FAILDED\n        });\n      }\n    } catch (e) {\n      toast.error(\"Save Infor Detail Doctor succeed!\");\n      console.log('FETCH_ALL_DOCTORS_FAILDED', e);\n      dispatch({\n        type: actionTypes.SAVE_DETAIL_DOCTOR_FAILDED\n      });\n    }\n  };\n};\nexport const fetchAllScheduletTime = () => {\n  return async (dispatch, getState) => {\n    try {\n      let res = await getAllCodeService(\"TIME\");\n\n      if (res && res.errCode === 0) {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\n          dataTime: res.data\n        });\n      } else {\n        dispatch({\n          type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED\n        });\n      }\n    } catch (e) {\n      console.log('FETCH_ALL_DOCTORS_FAILDED', e);\n      dispatch({\n        type: actionTypes.FETCH_ALL_DOCTORS_FAILDED\n      });\n    }\n  };\n};\nexport const getRequiredDoctorInfor = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_START\n      });\n      let resPrice = await getAllCodeService(\"PRICE\");\n      let resPayment = await getAllCodeService(\"PAYMENT\");\n      let resProvince = await getAllCodeService(\"PROVINCE\");\n\n      if (resPrice && resPrice.errCode === 0 && resPayment && resPayment.errCode === 0 && resProvince && resProvince.errCode === 0) {\n        let data = {\n          resPrice: resPrice.data,\n          resPayment: resPayment.data,\n          resProvince: resProvince.data\n        };\n        dispatch(fetchRequiredDoctorInforSuccess(data));\n      } else {\n        dispatch(fetchRequiredDoctorInforFailed());\n      }\n    } catch (e) {\n      dispatch(fetchRequiredDoctorInforFailed());\n    }\n  };\n}; // type: actionTypes.FETCH_GENDER_START\n\nexport const fetchRequiredDoctorInforSuccess = allRequiredData => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS,\n  data: allRequiredData\n});\nexport const fetchRequiredDoctorInforFailed = () => ({\n  type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAIDED\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/src/store/actions/adminActions.js"],"names":["getAllCodeService","createNewUserService","getAllUsers","deleteUserService","editUserService","getTopDoctorHomeService","getAllDoctors","saveDetailDoctorService","actionTypes","toast","fetchGenderStart","dispatch","getState","type","FETCH_GENDER_START","res","console","log","errCode","fetchGenderSuccess","data","fetchGenderFailed","e","genderData","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAIDED","fetchPositionSuccess","positionData","FETCH_POSITION_SUCCESS","fetchPositionFailed","FETCH_POSITION_FAILDED","fetchRoleSuccess","roleData","FETCH_ROLE_SUCCESS","fetchRoleFailed","fetchPositionStart","fetchRoleStart","createNewUser","success","saveUserSuccess","fetchAllUsersStart","saveUserFailed","fetchAllUsersSuccess","users","reverse","error","fetchAllUsersFailed","FETCH_ALL_USERS_SUCCESS","FETCH_ALL_USERS_FAILDED","deleteAUser","userId","deleteUserSuccess","deleteUserFailed","DELETE_USER_SUCCESS","DELETE_USER_FAILDED","editAUser","editUserSuccess","editUserFailed","EDIT_USER_SUCCESS","EDIT_USER_FAILDED","fetchTopDoctor","FETCH_TOP_DOCTORS_SUCCESS","dataDoctors","FETCH_TOP_DOCTORS_FAILDER","fetchAllDoctors","FETCH_ALL_DOCTORS_SUCCESS","dataDr","FETCH_ALL_DOCTORS_FAILDER","saveDetailDoctor","SAVE_DETAIL_DOCTOR_SUCCESS","SAVE_DETAIL_DOCTOR_FAILDED","fetchAllScheduletTime","FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS","dataTime","FETCH_ALLCODE_SCHEDULE_TIME_FAILDED","FETCH_ALL_DOCTORS_FAILDED","getRequiredDoctorInfor","FETCH_REQUIRED_DOCTOR_INFOR_START","resPrice","resPayment","resProvince","fetchRequiredDoctorInforSuccess","fetchRequiredDoctorInforFailed","allRequiredData","FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS","FETCH_REQUIRED_DOCTOR_INFOR_FAIDED"],"mappings":"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","sourcesContent":["import { getAllCodeService, createNewUserService, getAllUsers, deleteUserService, editUserService, getTopDoctorHomeService, getAllDoctors, saveDetailDoctorService } from '../../services/userService';\r\nimport actionTypes from './actionTypes';\r\nimport { toast } from \"react-toastify\";\r\n\r\n// export const fetchGenderStart = () => ({\r\n//     type: actionTypes.FETCH_GENDER_START\r\n// })\r\n\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({\r\n                type: actionTypes.FETCH_GENDER_START\r\n            })\r\n            let res = await getAllCodeService(\"GENDER\");\r\n            console.log('xxxxxxxxxxxxres cua fetchGenderStart la', res)\r\n            if (res && res.errCode === 0) {\r\n\r\n                dispatch(fetchGenderSuccess(res.data));\r\n            } else {\r\n                dispatch(fetchGenderFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchGenderFailed());\r\n            console.log('fetchGenderStart error', e)\r\n        }\r\n    }\r\n}\r\n// type: actionTypes.FETCH_GENDER_START\r\n\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: genderData\r\n})\r\n\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAIDED\r\n})\r\n\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data: positionData\r\n})\r\n\r\nexport const fetchPositionFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAILDED\r\n})\r\n//start doing end\r\n\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData\r\n})\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n})\r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"POSITION\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchPositionSuccess(res.data));\r\n            } else {\r\n                dispatch(fetchPositionFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchPositionFailed());\r\n            console.log('fetchGenderStart error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"ROLE\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data));\r\n            } else {\r\n                dispatch(fetchRoleFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchPositionFailed());\r\n            console.log('fetchRole error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            console.log('check create user redux', res)\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Create a new user succeed!\")\r\n                dispatch(saveUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                dispatch(saveUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(saveUserFailed());\r\n            console.log('fetchRole error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveUserSuccess = () => ({\r\n    type: 'CREATE_USER_SUCCESS'\r\n})\r\n\r\nexport const saveUserFailed = () => ({\r\n    type: 'CREATE_USER_FAILDED'\r\n})\r\n\r\nexport const fetchAllUsersStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllUsers(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchAllUsersSuccess(res.users.reverse()));\r\n            } else {\r\n                toast.error(\"Fetch all user error!\")\r\n                dispatch(fetchAllUsersFailed());\r\n            }\r\n        } catch (e) {\r\n            toast.error(\"Fetch all user error!\")\r\n            dispatch(fetchAllUsersFailed());\r\n            console.log('fetchAllUsersFailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllUsersSuccess = (data) => ({\r\n    type: actionTypes.FETCH_ALL_USERS_SUCCESS,\r\n    users: data\r\n\r\n})\r\n\r\nexport const fetchAllUsersFailed = () => ({\r\n    type: actionTypes.FETCH_ALL_USERS_FAILDED\r\n\r\n})\r\n\r\n\r\nexport const deleteAUser = (userId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await deleteUserService(userId);\r\n            console.log('check create user redux', res)\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Delete the  user succeed!\")\r\n                dispatch(deleteUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(\"Delete the  user error\");\r\n                dispatch(deleteUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(saveUserFailed());\r\n            console.log('fetchRole error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteUserSuccess = () => ({\r\n    type: actionTypes.DELETE_USER_SUCCESS\r\n})\r\n\r\nexport const deleteUserFailed = () => ({\r\n    type: actionTypes.DELETE_USER_FAILDED\r\n})\r\n\r\nexport const editAUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await editUserService(data);\r\n            console.log('check create user redux', res)\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Update the  user succeed!\")\r\n                dispatch(editUserSuccess());\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(\"Update the user error\");\r\n                dispatch(editUserFailed());\r\n            }\r\n        } catch (e) {\r\n            toast.error(\"Update the user error!\")\r\n            dispatch(editUserFailed());\r\n            console.log('EditUserFailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const editUserSuccess = () => ({\r\n    type: actionTypes.EDIT_USER_SUCCESS\r\n})\r\n\r\nexport const editUserFailed = () => ({\r\n    type: actionTypes.EDIT_USER_FAILDED\r\n})\r\n\r\n// let res1 = await getTopDoctorHomeService(3);\r\nexport const fetchTopDoctor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n\r\n            let res = await getTopDoctorHomeService('');\r\n            console.log(\"5555555555555555\", res)\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\r\n                    dataDoctors: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_FAILDER\r\n                })\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log('FETCH_TOP_DOCTORS_FAILDED', e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_TOP_DOCTORS_FAILDER\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllDoctors = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n\r\n            let res = await getAllDoctors();\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_SUCCESS,\r\n                    dataDr: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_FAILDER\r\n                })\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log('FETCH_ALL_DOCTORS_FAILDED', e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_DOCTORS_FAILDER\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveDetailDoctor = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n\r\n            let res = await saveDetailDoctorService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Save Infor Detail Doctor the user succeed!\");\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS,\r\n                })\r\n            } else {\r\n                toast.error(\"Save Infor Detail Doctor error\");\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_FAILDED\r\n                })\r\n            }\r\n\r\n        } catch (e) {\r\n            toast.error(\"Save Infor Detail Doctor succeed!\");\r\n            console.log('FETCH_ALL_DOCTORS_FAILDED', e)\r\n            dispatch({\r\n                type: actionTypes.SAVE_DETAIL_DOCTOR_FAILDED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllScheduletTime = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n\r\n            let res = await getAllCodeService(\"TIME\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\r\n                    dataTime: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED\r\n                })\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log('FETCH_ALL_DOCTORS_FAILDED', e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_DOCTORS_FAILDED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const getRequiredDoctorInfor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({\r\n                type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_START\r\n            })\r\n            let resPrice = await getAllCodeService(\"PRICE\");\r\n            let resPayment = await getAllCodeService(\"PAYMENT\");\r\n            let resProvince = await getAllCodeService(\"PROVINCE\");\r\n            if (resPrice && resPrice.errCode === 0 && resPayment && resPayment.errCode === 0 && resProvince && resProvince.errCode === 0) {\r\n                let data = {\r\n                    resPrice: resPrice.data,\r\n                    resPayment: resPayment.data,\r\n                    resProvince: resProvince.data\r\n                }\r\n                dispatch(fetchRequiredDoctorInforSuccess(data));\r\n            } else {\r\n                dispatch(fetchRequiredDoctorInforFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchRequiredDoctorInforFailed());\r\n        }\r\n    }\r\n}\r\n// type: actionTypes.FETCH_GENDER_START\r\n\r\nexport const fetchRequiredDoctorInforSuccess = (allRequiredData) => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS,\r\n    data: allRequiredData\r\n})\r\n\r\nexport const fetchRequiredDoctorInforFailed = () => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAIDED\r\n})"]},"metadata":{},"sourceType":"module"}