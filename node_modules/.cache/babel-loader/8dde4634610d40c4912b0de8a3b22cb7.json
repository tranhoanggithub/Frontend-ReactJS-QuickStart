{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\LEARN REACTJS\\\\Frontend-ReactJS-QuickStart\\\\src\\\\containers\\\\System\\\\Doctor\\\\ManageSchedule.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport './ManageSchedule.scss';\nimport { FormattedMessage } from 'react-intl';\nimport Select from 'react-select';\nimport * as actions from \"../../../store/actions\";\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from '../../../utils';\nimport DatePicker from '../../../components/Input/DatePicker';\nimport moment from 'moment';\nimport { toast } from \"react-toastify\";\nimport _ from 'lodash';\nimport { saveBulkScheduleDoctor } from '../../../services/userService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ManageSchedule extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buildDataInputSelect = inputData => {\n      let result = [];\n      let {\n        language\n      } = this.props;\n\n      if (inputData && inputData.length > 0) {\n        inputData.map((item, index) => {\n          let object = {};\n          let labelVi = `${item.lastName} ${item.firstName}`;\n          let labelEn = `${item.firstName} ${item.lastName}`;\n          object.label = language === LANGUAGES.VI ? labelVi : labelEn;\n          object.value = item.id;\n          result.push(object);\n        });\n      }\n\n      return result;\n    };\n\n    this.handleChangeSelect = async selectedOption => {\n      this.setState({\n        selectedDoctor: selectedOption\n      });\n    };\n\n    this.handleOnchangeDatePicker = date => {\n      this.setState({\n        currentDate: date[0]\n      });\n    };\n\n    this.handleClickBtnTime = time => {\n      let {\n        rangeTime\n      } = this.state;\n\n      if (rangeTime && rangeTime.length > 0) {\n        let data = rangeTime;\n        data = data.map(item => {\n          if (item.id === time.id) item.isSelected = !item.isSelected;\n          return item;\n        });\n        this.setState({\n          rangeTime: rangeTime\n        });\n      }\n    };\n\n    this.handleSaveSchedule = async () => {\n      let {\n        rangeTime,\n        selectedDoctor,\n        currentDate\n      } = this.state;\n      let result = [];\n\n      if (!currentDate) {\n        toast.error(\"Invalid date!\");\n        return;\n      }\n\n      if (selectedDoctor && _.isEmpty(selectedDoctor)) {\n        toast.error(\"Invalid selected doctor!\");\n        return;\n      } // let formatedDate = moment(currentDate).format(dateFormat.SEND_TO_SERVER);\n      //  = moment(currentDate).unix();\n\n\n      let formatedDate = new Date(currentDate).getTime(); // console.log(date.getTime())\n\n      if (rangeTime && rangeTime.length > 0) {\n        let selectedTime = rangeTime.filter(item => item.isSelected === true);\n\n        if (selectedTime && selectedTime.length > 0) {\n          selectedTime.map((schedule, index) => {\n            console.log('666666666666666666666666666', schedule, index, selectedTime);\n            let object = {};\n            object.doctorId = selectedDoctor.value;\n            object.date = formatedDate;\n            object.timeType = schedule.keyMap;\n            result.push(object);\n          });\n        } else {\n          toast.error(\"Invalid selected time!\");\n          return;\n        }\n      }\n\n      let res = await saveBulkScheduleDoctor({\n        arrSchedule: result,\n        doctorId: selectedDoctor.value,\n        formatedDate: formatedDate\n      });\n\n      if (res && res.errCode === 0) {\n        toast.success(\"Save Infor succeed\");\n      } else {\n        toast.error(\"error saveBulkScheduleDoctor\");\n        console.log('saveBulkScheduleDoctor .> error:', res);\n      }\n    };\n\n    this.state = {\n      listDoctors: [],\n      selectedDoctor: {},\n      currentDate: '',\n      rangeTime: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllDoctors();\n    this.props.fetchAllScheduleTime();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.allDoctors !== this.props.allDoctors) {\n      let dataSelect = this.buildDataInputSelect(this.props.allDoctors);\n      this.setState({\n        listDoctors: dataSelect\n      });\n    }\n\n    if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\n      let data = this.props.allScheduleTime;\n\n      if (data && data.length > 0) {\n        // data.map(item => {\n        //     item.isSelected = false;\n        //     return item;\n        // })\n        data = data.map(item => ({ ...item,\n          isSelected: 'false'\n        }));\n      }\n\n      this.setState({\n        rangeTime: data\n      });\n    } // if (prevProps.language !== this.props.language) {\n    //     let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\n    //     this.setState({\n    //         listDoctors: dataSelect\n    //     })\n    // }\n\n  }\n\n  render() {\n    let {\n      rangeTime\n    } = this.state;\n    let {\n      language\n    } = this.props;\n    let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manage-schedule-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-s-title\",\n        children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: \"manage-schedule.title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6 form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"manage-schedule.choose-doctor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: this.state.selectedDoctor,\n              onChange: this.handleChangeSelect,\n              options: this.state.listDoctors\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-6 form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"manage-schedule.choose-date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 36\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              onChange: this.handleOnchangeDatePicker,\n              className: \"form-control\" // value={this.state.currentDate}\n              ,\n              value: this.state.currentDate,\n              minDate: yesterday\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 pick-hour-container\",\n            children: rangeTime && rangeTime.length > 0 && rangeTime.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                className: item.isSelected === true ? \"btn btn-schedule active\" : \"btn btn-schedule\",\n                onClick: () => this.handleClickBtnTime(item),\n                children: language === LANGUAGES.VI ? item.valueVi : item.valueEn\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-save-schedule\",\n              onClick: () => this.handleSaveSchedule(),\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"manage-schedule.save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 125\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLoggedIn: state.user.isLoggedIn,\n    language: state.app.language,\n    allDoctors: state.admin.allDoctors,\n    allScheduleTime: state.admin.allScheduleTime\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\n    fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduletTime())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/src/containers/System/Doctor/ManageSchedule.js"],"names":["React","Component","connect","FormattedMessage","Select","actions","CRUD_ACTIONS","LANGUAGES","dateFormat","DatePicker","moment","toast","_","saveBulkScheduleDoctor","ManageSchedule","constructor","props","buildDataInputSelect","inputData","result","language","length","map","item","index","object","labelVi","lastName","firstName","labelEn","label","VI","value","id","push","handleChangeSelect","selectedOption","setState","selectedDoctor","handleOnchangeDatePicker","date","currentDate","handleClickBtnTime","time","rangeTime","state","data","isSelected","handleSaveSchedule","error","isEmpty","formatedDate","Date","getTime","selectedTime","filter","schedule","console","log","doctorId","timeType","keyMap","res","arrSchedule","errCode","success","listDoctors","componentDidMount","fetchAllDoctors","fetchAllScheduleTime","componentDidUpdate","prevProps","prevState","snapshot","allDoctors","dataSelect","allScheduleTime","render","yesterday","setDate","getDate","valueVi","valueEn","mapStateToProps","isLoggedIn","user","app","admin","mapDispatchToProps","dispatch","fetchAllScheduletTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './ManageSchedule.scss'\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Select from 'react-select'\r\nimport * as actions from \"../../../store/actions\"\r\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker'\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport _ from 'lodash';\r\nimport { saveBulkScheduleDoctor } from '../../../services/userService';\r\n\r\n\r\n\r\n\r\nclass ManageSchedule extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listDoctors: [],\r\n            selectedDoctor: {},\r\n            currentDate: '',\r\n            rangeTime: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTime();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0) {\r\n                // data.map(item => {\r\n                //     item.isSelected = false;\r\n                //     return item;\r\n                // })\r\n                data = data.map(item => ({ ...item, isSelected: 'false' }))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n        // if (prevProps.language !== this.props.language) {\r\n        //     let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n        //     this.setState({\r\n        //         listDoctors: dataSelect\r\n        //     })\r\n        // }\r\n    }\r\n    buildDataInputSelect = (inputData) => {\r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            inputData.map((item, index) => {\r\n                let object = {};\r\n                let labelVi = `${item.lastName} ${item.firstName}`;\r\n                let labelEn = `${item.firstName} ${item.lastName}`;\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = item.id;\r\n                result.push(object)\r\n            })\r\n        }\r\n        return result;\r\n    }\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({ selectedDoctor: selectedOption });\r\n    };\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        })\r\n    }\r\n\r\n    handleClickBtnTime = (time) => {\r\n        let { rangeTime } = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let data = rangeTime\r\n            data = data.map(\r\n                item => {\r\n                    if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                    return item;\r\n                }\r\n            )\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n    handleSaveSchedule = async () => {\r\n        let { rangeTime, selectedDoctor, currentDate } = this.state;\r\n        let result = [];\r\n        if (!currentDate) {\r\n            toast.error(\"Invalid date!\");\r\n            return;\r\n        }\r\n        if (selectedDoctor && _.isEmpty(selectedDoctor)) {\r\n            toast.error(\"Invalid selected doctor!\")\r\n            return;\r\n        }\r\n        // let formatedDate = moment(currentDate).format(dateFormat.SEND_TO_SERVER);\r\n        //  = moment(currentDate).unix();\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        // console.log(date.getTime())\r\n        if (rangeTime && rangeTime.length > 0) {\r\n\r\n            let selectedTime = rangeTime.filter(item => item.isSelected === true);\r\n            if (selectedTime && selectedTime.length > 0) {\r\n                selectedTime.map((schedule, index) => {\r\n                    console.log('666666666666666666666666666', schedule, index, selectedTime)\r\n                    let object = {};\r\n                    object.doctorId = selectedDoctor.value;\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object)\r\n                })\r\n            } else {\r\n                toast.error(\"Invalid selected time!\")\r\n                return;\r\n            }\r\n        }\r\n        let res = await saveBulkScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: selectedDoctor.value,\r\n            formatedDate: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            toast.success(\"Save Infor succeed\")\r\n        } else {\r\n            toast.error(\"error saveBulkScheduleDoctor\")\r\n            console.log('saveBulkScheduleDoctor .> error:', res)\r\n        }\r\n    }\r\n    render() {\r\n        let { rangeTime } = this.state;\r\n        let { language } = this.props;\r\n        let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\" />\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label><FormattedMessage id=\"manage-schedule.choose-doctor\" /></label>\r\n                            <Select\r\n                                value={this.state.selectedDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.listDoctors}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label><FormattedMessage id=\"manage-schedule.choose-date\" /></label>\r\n                            <DatePicker\r\n                                onChange={this.handleOnchangeDatePicker}\r\n                                className=\"form-control\"\r\n                                // value={this.state.currentDate}\r\n                                value={this.state.currentDate}\r\n                                minDate={yesterday}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                                rangeTime.map((item, index) => {\r\n                                    return (\r\n                                        <button className={item.isSelected === true ? \"btn btn-schedule active\" : \"btn btn-schedule\"} key={index} onClick={() => this.handleClickBtnTime(item)}>{language === LANGUAGES.VI ? item.valueVi : item.valueEn}</button>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-save-schedule\" onClick={() => this.handleSaveSchedule()}><FormattedMessage id=\"manage-schedule.save\" /></button>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduletTime()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n"]},"metadata":{},"sourceType":"module"}