{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlError, IntlErrorCode } from './error';\nvar LIST_FORMAT_OPTIONS = ['localeMatcher', 'type', 'style'];\nvar now = Date.now();\nfunction generateToken(i) {\n  return now + \"_\" + i + \"_\" + now;\n}\nexport function formatList(opts, getListFormat, values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {\n    var val = el.value;\n    if (typeof val !== 'string') {\n      all.push(val);\n    } else if (typeof all[all.length - 1] === 'string') {\n      all[all.length - 1] += val;\n    } else {\n      all.push(val);\n    }\n    return all;\n  }, []);\n  return results.length === 1 ? results[0] : results;\n}\nexport function formatListToParts(_a, getListFormat, values, options) {\n  var locale = _a.locale,\n    onError = _a.onError;\n  if (options === void 0) {\n    options = {};\n  }\n  var ListFormat = Intl.ListFormat;\n  if (!ListFormat) {\n    onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\n  }\n  var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n  try {\n    var richValues_1 = {};\n    var serializedValues = values.map(function (v, i) {\n      if (typeof v === 'object') {\n        var id = generateToken(i);\n        richValues_1[id] = v;\n        return id;\n      }\n      return String(v);\n    });\n    return getListFormat(locale, filteredOptions).formatToParts(serializedValues).map(function (part) {\n      return part.type === 'literal' ? part : __assign(__assign({}, part), {\n        value: richValues_1[part.value] || part.value\n      });\n    });\n  } catch (e) {\n    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting list.', e));\n  }\n  // @ts-ignore\n  return values;\n}","map":{"version":3,"names":["__assign","filterProps","FormatError","ErrorCode","IntlError","IntlErrorCode","LIST_FORMAT_OPTIONS","now","Date","generateToken","i","formatList","opts","getListFormat","values","options","results","formatListToParts","reduce","all","el","val","value","push","length","_a","locale","onError","ListFormat","Intl","MISSING_INTL_API","filteredOptions","richValues_1","serializedValues","map","v","id","String","formatToParts","part","type","e","FORMAT_ERROR"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/intl/lib/src/list.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { filterProps } from './utils';\r\nimport { FormatError, ErrorCode } from 'intl-messageformat';\r\nimport { IntlError, IntlErrorCode } from './error';\r\nvar LIST_FORMAT_OPTIONS = [\r\n    'localeMatcher',\r\n    'type',\r\n    'style',\r\n];\r\nvar now = Date.now();\r\nfunction generateToken(i) {\r\n    return now + \"_\" + i + \"_\" + now;\r\n}\r\nexport function formatList(opts, getListFormat, values, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {\r\n        var val = el.value;\r\n        if (typeof val !== 'string') {\r\n            all.push(val);\r\n        }\r\n        else if (typeof all[all.length - 1] === 'string') {\r\n            all[all.length - 1] += val;\r\n        }\r\n        else {\r\n            all.push(val);\r\n        }\r\n        return all;\r\n    }, []);\r\n    return results.length === 1 ? results[0] : results;\r\n}\r\nexport function formatListToParts(_a, getListFormat, values, options) {\r\n    var locale = _a.locale, onError = _a.onError;\r\n    if (options === void 0) { options = {}; }\r\n    var ListFormat = Intl.ListFormat;\r\n    if (!ListFormat) {\r\n        onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\r\n    }\r\n    var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\r\n    try {\r\n        var richValues_1 = {};\r\n        var serializedValues = values.map(function (v, i) {\r\n            if (typeof v === 'object') {\r\n                var id = generateToken(i);\r\n                richValues_1[id] = v;\r\n                return id;\r\n            }\r\n            return String(v);\r\n        });\r\n        return getListFormat(locale, filteredOptions)\r\n            .formatToParts(serializedValues)\r\n            .map(function (part) {\r\n            return part.type === 'literal'\r\n                ? part\r\n                : __assign(__assign({}, part), { value: richValues_1[part.value] || part.value });\r\n        });\r\n    }\r\n    catch (e) {\r\n        onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting list.', e));\r\n    }\r\n    // @ts-ignore\r\n    return values;\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,SAAS;AACrC,SAASC,WAAW,EAAEC,SAAS,QAAQ,oBAAoB;AAC3D,SAASC,SAAS,EAAEC,aAAa,QAAQ,SAAS;AAClD,IAAIC,mBAAmB,GAAG,CACtB,eAAe,EACf,MAAM,EACN,OAAO,CACV;AACD,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;AACpB,SAASE,aAAaA,CAACC,CAAC,EAAE;EACtB,OAAOH,GAAG,GAAG,GAAG,GAAGG,CAAC,GAAG,GAAG,GAAGH,GAAG;AACpC;AACA,OAAO,SAASI,UAAUA,CAACC,IAAI,EAAEC,aAAa,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAC7D,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,OAAO,GAAGC,iBAAiB,CAACL,IAAI,EAAEC,aAAa,EAAEC,MAAM,EAAEC,OAAO,CAAC,CAACG,MAAM,CAAC,UAAUC,GAAG,EAAEC,EAAE,EAAE;IAC5F,IAAIC,GAAG,GAAGD,EAAE,CAACE,KAAK;IAClB,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;MACzBF,GAAG,CAACI,IAAI,CAACF,GAAG,CAAC;IACjB,CAAC,MACI,IAAI,OAAOF,GAAG,CAACA,GAAG,CAACK,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC9CL,GAAG,CAACA,GAAG,CAACK,MAAM,GAAG,CAAC,CAAC,IAAIH,GAAG;IAC9B,CAAC,MACI;MACDF,GAAG,CAACI,IAAI,CAACF,GAAG,CAAC;IACjB;IACA,OAAOF,GAAG;EACd,CAAC,EAAE,EAAE,CAAC;EACN,OAAOH,OAAO,CAACQ,MAAM,KAAK,CAAC,GAAGR,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO;AACtD;AACA,OAAO,SAASC,iBAAiBA,CAACQ,EAAE,EAAEZ,aAAa,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAClE,IAAIW,MAAM,GAAGD,EAAE,CAACC,MAAM;IAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;EAC5C,IAAIZ,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIa,UAAU,GAAGC,IAAI,CAACD,UAAU;EAChC,IAAI,CAACA,UAAU,EAAE;IACbD,OAAO,CAAC,IAAIzB,WAAW,CAAC,iHAAiH,EAAEC,SAAS,CAAC2B,gBAAgB,CAAC,CAAC;EAC3K;EACA,IAAIC,eAAe,GAAG9B,WAAW,CAACc,OAAO,EAAET,mBAAmB,CAAC;EAC/D,IAAI;IACA,IAAI0B,YAAY,GAAG,CAAC,CAAC;IACrB,IAAIC,gBAAgB,GAAGnB,MAAM,CAACoB,GAAG,CAAC,UAAUC,CAAC,EAAEzB,CAAC,EAAE;MAC9C,IAAI,OAAOyB,CAAC,KAAK,QAAQ,EAAE;QACvB,IAAIC,EAAE,GAAG3B,aAAa,CAACC,CAAC,CAAC;QACzBsB,YAAY,CAACI,EAAE,CAAC,GAAGD,CAAC;QACpB,OAAOC,EAAE;MACb;MACA,OAAOC,MAAM,CAACF,CAAC,CAAC;IACpB,CAAC,CAAC;IACF,OAAOtB,aAAa,CAACa,MAAM,EAAEK,eAAe,CAAC,CACxCO,aAAa,CAACL,gBAAgB,CAAC,CAC/BC,GAAG,CAAC,UAAUK,IAAI,EAAE;MACrB,OAAOA,IAAI,CAACC,IAAI,KAAK,SAAS,GACxBD,IAAI,GACJvC,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEuC,IAAI,CAAC,EAAE;QAAEjB,KAAK,EAAEU,YAAY,CAACO,IAAI,CAACjB,KAAK,CAAC,IAAIiB,IAAI,CAACjB;MAAM,CAAC,CAAC;IACzF,CAAC,CAAC;EACN,CAAC,CACD,OAAOmB,CAAC,EAAE;IACNd,OAAO,CAAC,IAAIvB,SAAS,CAACC,aAAa,CAACqC,YAAY,EAAE,wBAAwB,EAAED,CAAC,CAAC,CAAC;EACnF;EACA;EACA,OAAO3B,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}