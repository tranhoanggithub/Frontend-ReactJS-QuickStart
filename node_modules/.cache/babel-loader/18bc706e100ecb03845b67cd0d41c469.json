{"ast":null,"code":"/**\n * logger: undo redo\n */\nvar MAX_LOG_SIZE = 100;\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.record = [];\n    this.recycle = [];\n    this.initValue = '';\n    var _props = props,\n        _props$maxSize = _props.maxSize,\n        maxSize = _props$maxSize === void 0 ? MAX_LOG_SIZE : _props$maxSize;\n    this.maxSize = maxSize;\n  }\n\n  var _proto = Logger.prototype;\n\n  _proto.push = function push(val) {\n    var result = this.record.push(val); // 如果超过了最长限制，把之前的清理掉，避免造成内存浪费\n\n    while (this.record.length > this.maxSize) {\n      this.record.shift();\n    }\n\n    return result;\n  };\n\n  _proto.get = function get() {\n    return this.record;\n  };\n\n  _proto.getLast = function getLast() {\n    var length = this.record.length;\n    return this.record[length - 1];\n  };\n\n  _proto.undo = function undo(skipText) {\n    var current = this.record.pop();\n\n    if (typeof current === 'undefined') {\n      return this.initValue;\n    } // 如果最上面的和现在的不一样，那就不需要再pop一次\n\n\n    if (current !== skipText) {\n      this.recycle.push(current);\n      return current;\n    } // 否则的话，最顶上的一个是当前状态，所以要pop两次才能得到之前的结果\n\n\n    var last = this.record.pop();\n\n    if (typeof last === 'undefined') {\n      // 已经没有更老的记录了，把初始值给出去吧\n      this.recycle.push(current);\n      return this.initValue;\n    } // last 才是真正的上一步\n\n\n    this.recycle.push(current);\n    return last;\n  };\n\n  _proto.redo = function redo() {\n    var history = this.recycle.pop();\n\n    if (typeof history !== 'undefined') {\n      this.push(history);\n      return history;\n    }\n\n    return undefined;\n  };\n\n  _proto.cleanRedo = function cleanRedo() {\n    this.recycle = [];\n  };\n\n  _proto.getUndoCount = function getUndoCount() {\n    return this.undo.length;\n  };\n\n  _proto.getRedoCount = function getRedoCount() {\n    return this.recycle.length;\n  };\n\n  return Logger;\n}();\n\nexport default Logger;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/react-markdown-editor-lite/esm/plugins/logger/logger.js"],"names":["MAX_LOG_SIZE","Logger","props","record","recycle","initValue","_props","_props$maxSize","maxSize","_proto","prototype","push","val","result","length","shift","get","getLast","undo","skipText","current","pop","last","redo","history","undefined","cleanRedo","getUndoCount","getRedoCount"],"mappings":"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","sourcesContent":["/**\n * logger: undo redo\n */\nvar MAX_LOG_SIZE = 100;\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.record = [];\n    this.recycle = [];\n    this.initValue = '';\n    var _props = props,\n        _props$maxSize = _props.maxSize,\n        maxSize = _props$maxSize === void 0 ? MAX_LOG_SIZE : _props$maxSize;\n    this.maxSize = maxSize;\n  }\n\n  var _proto = Logger.prototype;\n\n  _proto.push = function push(val) {\n    var result = this.record.push(val); // 如果超过了最长限制，把之前的清理掉，避免造成内存浪费\n\n    while (this.record.length > this.maxSize) {\n      this.record.shift();\n    }\n\n    return result;\n  };\n\n  _proto.get = function get() {\n    return this.record;\n  };\n\n  _proto.getLast = function getLast() {\n    var length = this.record.length;\n    return this.record[length - 1];\n  };\n\n  _proto.undo = function undo(skipText) {\n    var current = this.record.pop();\n\n    if (typeof current === 'undefined') {\n      return this.initValue;\n    } // 如果最上面的和现在的不一样，那就不需要再pop一次\n\n\n    if (current !== skipText) {\n      this.recycle.push(current);\n      return current;\n    } // 否则的话，最顶上的一个是当前状态，所以要pop两次才能得到之前的结果\n\n\n    var last = this.record.pop();\n\n    if (typeof last === 'undefined') {\n      // 已经没有更老的记录了，把初始值给出去吧\n      this.recycle.push(current);\n      return this.initValue;\n    } // last 才是真正的上一步\n\n\n    this.recycle.push(current);\n    return last;\n  };\n\n  _proto.redo = function redo() {\n    var history = this.recycle.pop();\n\n    if (typeof history !== 'undefined') {\n      this.push(history);\n      return history;\n    }\n\n    return undefined;\n  };\n\n  _proto.cleanRedo = function cleanRedo() {\n    this.recycle = [];\n  };\n\n  _proto.getUndoCount = function getUndoCount() {\n    return this.undo.length;\n  };\n\n  _proto.getRedoCount = function getRedoCount() {\n    return this.recycle.length;\n  };\n\n  return Logger;\n}();\n\nexport default Logger;"]},"metadata":{},"sourceType":"module"}