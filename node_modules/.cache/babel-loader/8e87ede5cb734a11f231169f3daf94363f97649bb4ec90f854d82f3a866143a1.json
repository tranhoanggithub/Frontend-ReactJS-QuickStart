{"ast":null,"code":"import { getNamedFormat, filterProps } from './utils';\nimport { IntlError, IntlErrorCode } from './error';\nvar NUMBER_FORMAT_OPTIONS = ['localeMatcher', 'style', 'currency', 'currencyDisplay', 'unit', 'unitDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits',\n// ES2020 NumberFormat\n'compactDisplay', 'currencyDisplay', 'currencySign', 'notation', 'signDisplay', 'unit', 'unitDisplay', 'numberingSystem'];\nexport function getFormatter(_a, getNumberFormat, options) {\n  var locale = _a.locale,\n    formats = _a.formats,\n    onError = _a.onError;\n  if (options === void 0) {\n    options = {};\n  }\n  var format = options.format;\n  var defaults = format && getNamedFormat(formats, 'number', format, onError) || {};\n  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n  return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  try {\n    return getFormatter(config, getNumberFormat, options).format(value);\n  } catch (e) {\n    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\n  }\n  return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  try {\n    return getFormatter(config, getNumberFormat, options).formatToParts(value);\n  } catch (e) {\n    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\n  }\n  return [];\n}","map":{"version":3,"names":["getNamedFormat","filterProps","IntlError","IntlErrorCode","NUMBER_FORMAT_OPTIONS","getFormatter","_a","getNumberFormat","options","locale","formats","onError","format","defaults","filteredOptions","formatNumber","config","value","e","FORMAT_ERROR","String","formatNumberToParts","formatToParts"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/intl/lib/src/number.js"],"sourcesContent":["import { getNamedFormat, filterProps } from './utils';\r\nimport { IntlError, IntlErrorCode } from './error';\r\nvar NUMBER_FORMAT_OPTIONS = [\r\n    'localeMatcher',\r\n    'style',\r\n    'currency',\r\n    'currencyDisplay',\r\n    'unit',\r\n    'unitDisplay',\r\n    'useGrouping',\r\n    'minimumIntegerDigits',\r\n    'minimumFractionDigits',\r\n    'maximumFractionDigits',\r\n    'minimumSignificantDigits',\r\n    'maximumSignificantDigits',\r\n    // ES2020 NumberFormat\r\n    'compactDisplay',\r\n    'currencyDisplay',\r\n    'currencySign',\r\n    'notation',\r\n    'signDisplay',\r\n    'unit',\r\n    'unitDisplay',\r\n    'numberingSystem',\r\n];\r\nexport function getFormatter(_a, getNumberFormat, options) {\r\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError;\r\n    if (options === void 0) { options = {}; }\r\n    var format = options.format;\r\n    var defaults = ((format &&\r\n        getNamedFormat(formats, 'number', format, onError)) ||\r\n        {});\r\n    var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\r\n    return getNumberFormat(locale, filteredOptions);\r\n}\r\nexport function formatNumber(config, getNumberFormat, value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    try {\r\n        return getFormatter(config, getNumberFormat, options).format(value);\r\n    }\r\n    catch (e) {\r\n        config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\r\n    }\r\n    return String(value);\r\n}\r\nexport function formatNumberToParts(config, getNumberFormat, value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    try {\r\n        return getFormatter(config, getNumberFormat, options).formatToParts(value);\r\n    }\r\n    catch (e) {\r\n        config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\r\n    }\r\n    return [];\r\n}\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,SAAS;AACrD,SAASC,SAAS,EAAEC,aAAa,QAAQ,SAAS;AAClD,IAAIC,qBAAqB,GAAG,CACxB,eAAe,EACf,OAAO,EACP,UAAU,EACV,iBAAiB,EACjB,MAAM,EACN,aAAa,EACb,aAAa,EACb,sBAAsB,EACtB,uBAAuB,EACvB,uBAAuB,EACvB,0BAA0B,EAC1B,0BAA0B;AAC1B;AACA,gBAAgB,EAChB,iBAAiB,EACjB,cAAc,EACd,UAAU,EACV,aAAa,EACb,MAAM,EACN,aAAa,EACb,iBAAiB,CACpB;AACD,OAAO,SAASC,YAAYA,CAACC,EAAE,EAAEC,eAAe,EAAEC,OAAO,EAAE;EACvD,IAAIC,MAAM,GAAGH,EAAE,CAACG,MAAM;IAAEC,OAAO,GAAGJ,EAAE,CAACI,OAAO;IAAEC,OAAO,GAAGL,EAAE,CAACK,OAAO;EAClE,IAAIH,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAII,MAAM,GAAGJ,OAAO,CAACI,MAAM;EAC3B,IAAIC,QAAQ,GAAKD,MAAM,IACnBZ,cAAc,CAACU,OAAO,EAAE,QAAQ,EAAEE,MAAM,EAAED,OAAO,CAAC,IAClD,CAAC,CAAE;EACP,IAAIG,eAAe,GAAGb,WAAW,CAACO,OAAO,EAAEJ,qBAAqB,EAAES,QAAQ,CAAC;EAC3E,OAAON,eAAe,CAACE,MAAM,EAAEK,eAAe,CAAC;AACnD;AACA,OAAO,SAASC,YAAYA,CAACC,MAAM,EAAET,eAAe,EAAEU,KAAK,EAAET,OAAO,EAAE;EAClE,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAI;IACA,OAAOH,YAAY,CAACW,MAAM,EAAET,eAAe,EAAEC,OAAO,CAAC,CAACI,MAAM,CAACK,KAAK,CAAC;EACvE,CAAC,CACD,OAAOC,CAAC,EAAE;IACNF,MAAM,CAACL,OAAO,CAAC,IAAIT,SAAS,CAACC,aAAa,CAACgB,YAAY,EAAE,0BAA0B,EAAED,CAAC,CAAC,CAAC;EAC5F;EACA,OAAOE,MAAM,CAACH,KAAK,CAAC;AACxB;AACA,OAAO,SAASI,mBAAmBA,CAACL,MAAM,EAAET,eAAe,EAAEU,KAAK,EAAET,OAAO,EAAE;EACzE,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAI;IACA,OAAOH,YAAY,CAACW,MAAM,EAAET,eAAe,EAAEC,OAAO,CAAC,CAACc,aAAa,CAACL,KAAK,CAAC;EAC9E,CAAC,CACD,OAAOC,CAAC,EAAE;IACNF,MAAM,CAACL,OAAO,CAAC,IAAIT,SAAS,CAACC,aAAa,CAACgB,YAAY,EAAE,0BAA0B,EAAED,CAAC,CAAC,CAAC;EAC5F;EACA,OAAO,EAAE;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}