{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { WHITE_SPACE_REGEX } from './regex.generated';\nexport function parseNumberSkeletonFromString(skeleton) {\n  if (skeleton.length === 0) {\n    throw new Error('Number skeleton cannot be empty');\n  }\n  // Parse the skeleton\n  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function (x) {\n    return x.length > 0;\n  });\n  var tokens = [];\n  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\n    var stringToken = stringTokens_1[_i];\n    var stemAndOptions = stringToken.split('/');\n    if (stemAndOptions.length === 0) {\n      throw new Error('Invalid number skeleton');\n    }\n    var stem = stemAndOptions[0],\n      options = stemAndOptions.slice(1);\n    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n      var option = options_1[_a];\n      if (option.length === 0) {\n        throw new Error('Invalid number skeleton');\n      }\n    }\n    tokens.push({\n      stem: stem,\n      options: options\n    });\n  }\n  return tokens;\n}\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n    case '()':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n    case '+!':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n    case '()!':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n    case '+?':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n    case '()?':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n    case '+_':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseConciseScientificAndEngineeringStem(stem) {\n  // Engineering\n  var result;\n  if (stem[0] === 'E' && stem[1] === 'E') {\n    result = {\n      notation: 'engineering'\n    };\n    stem = stem.slice(2);\n  } else if (stem[0] === 'E') {\n    result = {\n      notation: 'scientific'\n    };\n    stem = stem.slice(1);\n  }\n  if (result) {\n    var signDisplay = stem.slice(0, 2);\n    if (signDisplay === '+!') {\n      result.signDisplay = 'always';\n      stem = stem.slice(2);\n    } else if (signDisplay === '+?') {\n      result.signDisplay = 'exceptZero';\n      stem = stem.slice(2);\n    }\n    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\n      throw new Error('Malformed concise eng/scientific notation');\n    }\n    result.minimumIntegerDigits = stem.length;\n  }\n  return result;\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\r\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\r\n */\nexport function parseNumberSkeleton(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n      case '%':\n        result.style = 'percent';\n        continue;\n      case '%x100':\n        result.style = 'percent';\n        result.scale = 100;\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n      case ',_':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n      case '.':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n      case 'unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n      case 'K':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n      case 'KK':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n      case 'scale':\n        result.scale = parseFloat(token.options[0]);\n        continue;\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n      case 'integer-width':\n        if (token.options.length > 1) {\n          throw new RangeError('integer-width stems only accept a single optional option');\n        }\n        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\n          if (g1) {\n            result.minimumIntegerDigits = g2.length;\n          } else if (g3 && g4) {\n            throw new Error('We currently do not support maximum integer digits');\n          } else if (g5) {\n            throw new Error('We currently do not support exact integer digits');\n          }\n          return '';\n        });\n        continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\n    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\n      result.minimumIntegerDigits = token.stem.length;\n      continue;\n    }\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      // Precision\n      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\n      // precision-integer case\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\n        // .000* case (before ICU67 it was .000+)\n        if (g2 === '*') {\n          result.minimumFractionDigits = g1.length;\n        }\n        // .### case\n        else if (g3 && g3[0] === '#') {\n          result.maximumFractionDigits = g3.length;\n        }\n        // .00## case\n        else if (g4 && g5) {\n          result.minimumFractionDigits = g4.length;\n          result.maximumFractionDigits = g4.length + g5.length;\n        } else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length;\n        }\n        return '';\n      });\n      if (token.options.length) {\n        result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n      }\n      continue;\n    }\n    // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = __assign(__assign({}, result), signOpts);\n    }\n    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\n    if (conciseScientificAndEngineeringOpts) {\n      result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["__assign","WHITE_SPACE_REGEX","parseNumberSkeletonFromString","skeleton","length","Error","stringTokens","split","filter","x","tokens","_i","stringTokens_1","stringToken","stemAndOptions","stem","options","slice","_a","options_1","option","push","icuUnitToEcma","unit","replace","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","INTEGER_WIDTH_REGEX","CONCISE_INTEGER_WIDTH_REGEX","parseSignificantPrecision","str","result","_","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseConciseScientificAndEngineeringStem","notation","test","minimumIntegerDigits","parseNotationOptions","opt","signOpts","parseNumberSkeleton","tokens_1","token","style","scale","currency","useGrouping","maximumFractionDigits","compactDisplay","reduce","all","currencyDisplay","unitDisplay","parseFloat","RangeError","g3","g4","g5","minimumFractionDigits","conciseScientificAndEngineeringOpts"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/icu-skeleton-parser/lib/number.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { WHITE_SPACE_REGEX } from './regex.generated';\r\nexport function parseNumberSkeletonFromString(skeleton) {\r\n    if (skeleton.length === 0) {\r\n        throw new Error('Number skeleton cannot be empty');\r\n    }\r\n    // Parse the skeleton\r\n    var stringTokens = skeleton\r\n        .split(WHITE_SPACE_REGEX)\r\n        .filter(function (x) { return x.length > 0; });\r\n    var tokens = [];\r\n    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {\r\n        var stringToken = stringTokens_1[_i];\r\n        var stemAndOptions = stringToken.split('/');\r\n        if (stemAndOptions.length === 0) {\r\n            throw new Error('Invalid number skeleton');\r\n        }\r\n        var stem = stemAndOptions[0], options = stemAndOptions.slice(1);\r\n        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\r\n            var option = options_1[_a];\r\n            if (option.length === 0) {\r\n                throw new Error('Invalid number skeleton');\r\n            }\r\n        }\r\n        tokens.push({ stem: stem, options: options });\r\n    }\r\n    return tokens;\r\n}\r\nfunction icuUnitToEcma(unit) {\r\n    return unit.replace(/^(.*?)-/, '');\r\n}\r\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\*)?|(#+)|(0+)(#+))$/g;\r\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\r\nvar INTEGER_WIDTH_REGEX = /(\\*)(0+)|(#+)(0+)|(0+)/g;\r\nvar CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;\r\nfunction parseSignificantPrecision(str) {\r\n    var result = {};\r\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\r\n        // @@@ case\r\n        if (typeof g2 !== 'string') {\r\n            result.minimumSignificantDigits = g1.length;\r\n            result.maximumSignificantDigits = g1.length;\r\n        }\r\n        // @@@+ case\r\n        else if (g2 === '+') {\r\n            result.minimumSignificantDigits = g1.length;\r\n        }\r\n        // .### case\r\n        else if (g1[0] === '#') {\r\n            result.maximumSignificantDigits = g1.length;\r\n        }\r\n        // .@@## or .@@@ case\r\n        else {\r\n            result.minimumSignificantDigits = g1.length;\r\n            result.maximumSignificantDigits =\r\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\r\n        }\r\n        return '';\r\n    });\r\n    return result;\r\n}\r\nfunction parseSign(str) {\r\n    switch (str) {\r\n        case 'sign-auto':\r\n            return {\r\n                signDisplay: 'auto',\r\n            };\r\n        case 'sign-accounting':\r\n        case '()':\r\n            return {\r\n                currencySign: 'accounting',\r\n            };\r\n        case 'sign-always':\r\n        case '+!':\r\n            return {\r\n                signDisplay: 'always',\r\n            };\r\n        case 'sign-accounting-always':\r\n        case '()!':\r\n            return {\r\n                signDisplay: 'always',\r\n                currencySign: 'accounting',\r\n            };\r\n        case 'sign-except-zero':\r\n        case '+?':\r\n            return {\r\n                signDisplay: 'exceptZero',\r\n            };\r\n        case 'sign-accounting-except-zero':\r\n        case '()?':\r\n            return {\r\n                signDisplay: 'exceptZero',\r\n                currencySign: 'accounting',\r\n            };\r\n        case 'sign-never':\r\n        case '+_':\r\n            return {\r\n                signDisplay: 'never',\r\n            };\r\n    }\r\n}\r\nfunction parseConciseScientificAndEngineeringStem(stem) {\r\n    // Engineering\r\n    var result;\r\n    if (stem[0] === 'E' && stem[1] === 'E') {\r\n        result = {\r\n            notation: 'engineering',\r\n        };\r\n        stem = stem.slice(2);\r\n    }\r\n    else if (stem[0] === 'E') {\r\n        result = {\r\n            notation: 'scientific',\r\n        };\r\n        stem = stem.slice(1);\r\n    }\r\n    if (result) {\r\n        var signDisplay = stem.slice(0, 2);\r\n        if (signDisplay === '+!') {\r\n            result.signDisplay = 'always';\r\n            stem = stem.slice(2);\r\n        }\r\n        else if (signDisplay === '+?') {\r\n            result.signDisplay = 'exceptZero';\r\n            stem = stem.slice(2);\r\n        }\r\n        if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {\r\n            throw new Error('Malformed concise eng/scientific notation');\r\n        }\r\n        result.minimumIntegerDigits = stem.length;\r\n    }\r\n    return result;\r\n}\r\nfunction parseNotationOptions(opt) {\r\n    var result = {};\r\n    var signOpts = parseSign(opt);\r\n    if (signOpts) {\r\n        return signOpts;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\r\n */\r\nexport function parseNumberSkeleton(tokens) {\r\n    var result = {};\r\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\r\n        var token = tokens_1[_i];\r\n        switch (token.stem) {\r\n            case 'percent':\r\n            case '%':\r\n                result.style = 'percent';\r\n                continue;\r\n            case '%x100':\r\n                result.style = 'percent';\r\n                result.scale = 100;\r\n                continue;\r\n            case 'currency':\r\n                result.style = 'currency';\r\n                result.currency = token.options[0];\r\n                continue;\r\n            case 'group-off':\r\n            case ',_':\r\n                result.useGrouping = false;\r\n                continue;\r\n            case 'precision-integer':\r\n            case '.':\r\n                result.maximumFractionDigits = 0;\r\n                continue;\r\n            case 'measure-unit':\r\n            case 'unit':\r\n                result.style = 'unit';\r\n                result.unit = icuUnitToEcma(token.options[0]);\r\n                continue;\r\n            case 'compact-short':\r\n            case 'K':\r\n                result.notation = 'compact';\r\n                result.compactDisplay = 'short';\r\n                continue;\r\n            case 'compact-long':\r\n            case 'KK':\r\n                result.notation = 'compact';\r\n                result.compactDisplay = 'long';\r\n                continue;\r\n            case 'scientific':\r\n                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\r\n                continue;\r\n            case 'engineering':\r\n                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\r\n                continue;\r\n            case 'notation-simple':\r\n                result.notation = 'standard';\r\n                continue;\r\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\r\n            case 'unit-width-narrow':\r\n                result.currencyDisplay = 'narrowSymbol';\r\n                result.unitDisplay = 'narrow';\r\n                continue;\r\n            case 'unit-width-short':\r\n                result.currencyDisplay = 'code';\r\n                result.unitDisplay = 'short';\r\n                continue;\r\n            case 'unit-width-full-name':\r\n                result.currencyDisplay = 'name';\r\n                result.unitDisplay = 'long';\r\n                continue;\r\n            case 'unit-width-iso-code':\r\n                result.currencyDisplay = 'symbol';\r\n                continue;\r\n            case 'scale':\r\n                result.scale = parseFloat(token.options[0]);\r\n                continue;\r\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\r\n            case 'integer-width':\r\n                if (token.options.length > 1) {\r\n                    throw new RangeError('integer-width stems only accept a single optional option');\r\n                }\r\n                token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {\r\n                    if (g1) {\r\n                        result.minimumIntegerDigits = g2.length;\r\n                    }\r\n                    else if (g3 && g4) {\r\n                        throw new Error('We currently do not support maximum integer digits');\r\n                    }\r\n                    else if (g5) {\r\n                        throw new Error('We currently do not support exact integer digits');\r\n                    }\r\n                    return '';\r\n                });\r\n                continue;\r\n        }\r\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width\r\n        if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {\r\n            result.minimumIntegerDigits = token.stem.length;\r\n            continue;\r\n        }\r\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\r\n            // Precision\r\n            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision\r\n            // precision-integer case\r\n            if (token.options.length > 1) {\r\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\r\n            }\r\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {\r\n                // .000* case (before ICU67 it was .000+)\r\n                if (g2 === '*') {\r\n                    result.minimumFractionDigits = g1.length;\r\n                }\r\n                // .### case\r\n                else if (g3 && g3[0] === '#') {\r\n                    result.maximumFractionDigits = g3.length;\r\n                }\r\n                // .00## case\r\n                else if (g4 && g5) {\r\n                    result.minimumFractionDigits = g4.length;\r\n                    result.maximumFractionDigits = g4.length + g5.length;\r\n                }\r\n                else {\r\n                    result.minimumFractionDigits = g1.length;\r\n                    result.maximumFractionDigits = g1.length;\r\n                }\r\n                return '';\r\n            });\r\n            if (token.options.length) {\r\n                result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\r\n            }\r\n            continue;\r\n        }\r\n        // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision\r\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\r\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\r\n            continue;\r\n        }\r\n        var signOpts = parseSign(token.stem);\r\n        if (signOpts) {\r\n            result = __assign(__assign({}, result), signOpts);\r\n        }\r\n        var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);\r\n        if (conciseScientificAndEngineeringOpts) {\r\n            result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}