{"ast":null,"code":"import actionTypes from '../actions/actionTypes';\nimport { getAllCodeService, createNewUserService } from '../../services/userService';\nconst initialState = {\n  isLoadingGender: false,\n  genders: [],\n  roles: [],\n  position: [],\n  users: [],\n  topDoctors: []\n};\n\nconst adminReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_GENDER_START:\n      let copyState = { ...state\n      };\n      copyState.isLoadingGender = true;\n      return { ...copyState\n      };\n\n    case actionTypes.FETCH_GENDER_SUCCESS:\n      state.genders = action.data;\n      state.isLoadingGender = false;\n      return { ...state\n      };\n\n    case actionTypes.FETCH_POSITION_SUCCESS:\n      state.position = action.data;\n      return { ...state\n      };\n\n    case actionTypes.FETCH_POSITION_FAILDED:\n      state.position = [];\n      return { ...state\n      };\n\n    case actionTypes.FETCH_ROLE_SUCCESS:\n      state.roles = action.data;\n      return { ...state\n      };\n\n    case actionTypes.FETCH_ROLE_FAILDED:\n      state.roles = [];\n      return { ...state\n      };\n\n    case actionTypes.FETCH_ALL_USERS_SUCCESS:\n      state.users = action.users;\n      return { ...state\n      };\n\n    case actionTypes.FETCH_ALL_USERS_FAILDED:\n      state.users = [];\n      return { ...state\n      };\n\n    case actionTypes.FETCH_TOP_DOCTORS_SUCCESS:\n      state.topDoctors = action.dataDoctors;\n      return { ...state\n      };\n\n    case actionTypes.FETCH_TOP_DOCTORS_FAILDED:\n      state.topDoctors = [];\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default adminReducer;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/src/store/reducers/adminReducer.js"],"names":["actionTypes","getAllCodeService","createNewUserService","initialState","isLoadingGender","genders","roles","position","users","topDoctors","adminReducer","state","action","type","FETCH_GENDER_START","copyState","FETCH_GENDER_SUCCESS","data","FETCH_POSITION_SUCCESS","FETCH_POSITION_FAILDED","FETCH_ROLE_SUCCESS","FETCH_ROLE_FAILDED","FETCH_ALL_USERS_SUCCESS","FETCH_ALL_USERS_FAILDED","FETCH_TOP_DOCTORS_SUCCESS","dataDoctors","FETCH_TOP_DOCTORS_FAILDED"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,4BAAxD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,eAAe,EAAE,KADA;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,QAAQ,EAAE,EAJO;AAKjBC,EAAAA,KAAK,EAAE,EALU;AAMjBC,EAAAA,UAAU,EAAE;AANK,CAArB;;AASA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,WAAW,CAACc,kBAAjB;AACI,UAAIC,SAAS,GAAG,EAAE,GAAGJ;AAAL,OAAhB;AACAI,MAAAA,SAAS,CAACX,eAAV,GAA4B,IAA5B;AACA,aAAO,EACH,GAAGW;AADA,OAAP;;AAGJ,SAAKf,WAAW,CAACgB,oBAAjB;AACIL,MAAAA,KAAK,CAACN,OAAN,GAAgBO,MAAM,CAACK,IAAvB;AACAN,MAAAA,KAAK,CAACP,eAAN,GAAwB,KAAxB;AACA,aAAO,EACH,GAAGO;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAACkB,sBAAjB;AACIP,MAAAA,KAAK,CAACJ,QAAN,GAAiBK,MAAM,CAACK,IAAxB;AACA,aAAO,EACH,GAAGN;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAACmB,sBAAjB;AACIR,MAAAA,KAAK,CAACJ,QAAN,GAAiB,EAAjB;AACA,aAAO,EACH,GAAGI;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAACoB,kBAAjB;AACIT,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACK,IAArB;AACA,aAAO,EACH,GAAGN;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAACqB,kBAAjB;AACIV,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACA,aAAO,EACH,GAAGK;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAACsB,uBAAjB;AACIX,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAArB;AACA,aAAO,EACH,GAAGG;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAACuB,uBAAjB;AACIZ,MAAAA,KAAK,CAACH,KAAN,GAAc,EAAd;AACA,aAAO,EACH,GAAGG;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAACwB,yBAAjB;AACIb,MAAAA,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACa,WAA1B;AACA,aAAO,EACH,GAAGd;AADA,OAAP;;AAGJ,SAAKX,WAAW,CAAC0B,yBAAjB;AACIf,MAAAA,KAAK,CAACF,UAAN,GAAmB,EAAnB;AACA,aAAO,EACH,GAAGE;AADA,OAAP;;AAGJ;AACI,aAAOA,KAAP;AAtDR;AAwDH,CAzDD;;AA2DA,eAAeD,YAAf","sourcesContent":["import actionTypes from '../actions/actionTypes';\r\nimport { getAllCodeService, createNewUserService } from '../../services/userService';\r\n\r\nconst initialState = {\r\n    isLoadingGender: false,\r\n    genders: [],\r\n    roles: [],\r\n    position: [],\r\n    users: [],\r\n    topDoctors: []\r\n}\r\n\r\nconst adminReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_GENDER_START:\r\n            let copyState = { ...state };\r\n            copyState.isLoadingGender = true;\r\n            return {\r\n                ...copyState,\r\n            }\r\n        case actionTypes.FETCH_GENDER_SUCCESS:\r\n            state.genders = action.data;\r\n            state.isLoadingGender = false;\r\n            return {\r\n                ...state,\r\n            }\r\n        case actionTypes.FETCH_POSITION_SUCCESS:\r\n            state.position = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_POSITION_FAILDED:\r\n            state.position = [];\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ROLE_SUCCESS:\r\n            state.roles = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ROLE_FAILDED:\r\n            state.roles = [];\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ALL_USERS_SUCCESS:\r\n            state.users = action.users;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_ALL_USERS_FAILDED:\r\n            state.users = [];\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_TOP_DOCTORS_SUCCESS:\r\n            state.topDoctors = action.dataDoctors;\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.FETCH_TOP_DOCTORS_FAILDED:\r\n            state.topDoctors = [];\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default adminReducer;"]},"metadata":{},"sourceType":"module"}