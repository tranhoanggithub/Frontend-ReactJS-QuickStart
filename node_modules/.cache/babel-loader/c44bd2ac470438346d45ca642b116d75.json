{"ast":null,"code":"/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n */\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode } from '../util.js';\nexport var microSeconds = micro;\nimport ObliviousSet from '../oblivious-set';\nimport { fillOptionsWithDefaults } from '../options';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n  if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n  if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  return false;\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  var openRequest = IndexedDB.open(dbName, 1);\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n  return new Promise(function (res, rej) {\n    transaction.oncomplete = function () {\n      return res();\n    };\n    transaction.onerror = function (ev) {\n      return rej(ev);\n    };\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n  });\n}\nexport function getAllMessages(db) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThen(db, lastCursorId) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  return new Promise(function (res) {\n    objectStore.openCursor(keyRangeValue).onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        ret.push(cursor.value);\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessageById(db, id) {\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\n  return new Promise(function (res) {\n    request.onsuccess = function () {\n      return res();\n    };\n  });\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n      if (cursor) {\n        var msgObk = cursor.value;\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return Promise.all(tooOld.map(function (msgObj) {\n      return removeMessageById(db, msgObj.id);\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(10),\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: Promise.resolve(),\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n    _readLoop(state);\n    return state;\n  });\n}\nfunction _readLoop(state) {\n  if (state.closed) return;\n  return readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return Promise.resolve(); // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return Promise.resolve();\n  return getMessagesHigherThen(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */.filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return Promise.resolve();\n  });\n}\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  if (isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"names":["sleep","randomInt","randomToken","microSeconds","micro","isNode","ObliviousSet","fillOptionsWithDefaults","DB_PREFIX","OBJECT_STORE_ID","type","getIdb","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","createDatabase","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","writeMessage","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","getAllMessages","ret","openCursor","cursor","push","value","getMessagesHigherThen","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","removeMessageById","id","request","getOldMessages","ttl","olderThen","msgObk","cleanOldMessages","then","tooOld","all","map","msgObj","create","options","state","closed","eMIs","idb","writeBlockPromise","resolve","messagesCallback","readQueuePromises","_readLoop","readNewMessages","fallbackInterval","_filterMessage","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","close","channelState","postMessage","onMessage","fn","canBeUsed","averageResponseTime"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/broadcast-channel/dist/es/methods/indexed-db.js"],"sourcesContent":["/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n */\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode } from '../util.js';\nexport var microSeconds = micro;\nimport ObliviousSet from '../oblivious-set';\nimport { fillOptionsWithDefaults } from '../options';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n  if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n  if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  return false;\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  var openRequest = IndexedDB.open(dbName, 1);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n  return new Promise(function (res, rej) {\n    transaction.oncomplete = function () {\n      return res();\n    };\n\n    transaction.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n  });\n}\nexport function getAllMessages(db) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThen(db, lastCursorId) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  return new Promise(function (res) {\n    objectStore.openCursor(keyRangeValue).onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value);\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessageById(db, id) {\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\n  return new Promise(function (res) {\n    request.onsuccess = function () {\n      return res();\n    };\n  });\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return Promise.all(tooOld.map(function (msgObj) {\n      return removeMessageById(db, msgObj.id);\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(10),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: Promise.resolve(),\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  return readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return Promise.resolve(); // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return Promise.resolve();\n  return getMessagesHigherThen(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return Promise.resolve();\n  });\n}\n\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  if (isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}