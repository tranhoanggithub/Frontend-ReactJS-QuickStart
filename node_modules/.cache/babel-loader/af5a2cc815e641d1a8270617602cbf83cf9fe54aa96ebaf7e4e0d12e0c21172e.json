{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport { IntlMessageFormat } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from './error';\nimport { TYPE } from '@formatjs/icu-messageformat-parser';\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = __assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = __assign(__assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n  var mfFormats = IntlMessageFormat.formats;\n  return __assign(__assign(__assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\nexport function formatMessage(_a, state, messageDescriptor, values, opts) {\n  var locale = _a.locale,\n    formats = _a.formats,\n    messages = _a.messages,\n    defaultLocale = _a.defaultLocale,\n    defaultFormats = _a.defaultFormats,\n    onError = _a.onError,\n    timeZone = _a.timeZone,\n    defaultRichTextElements = _a.defaultRichTextElements;\n  if (messageDescriptor === void 0) {\n    messageDescriptor = {\n      id: ''\n    };\n  }\n  var msgId = messageDescriptor.id,\n    defaultMessage = messageDescriptor.defaultMessage;\n  // `id` is a required field of a Message Descriptor.\n  invariant(!!msgId, \"[@formatjs/intl] An `id` must be provided to format a message. You can either:\\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\\nto autofix this issue\");\n  var id = String(msgId);\n  var message =\n  // In case messages is Object.create(null)\n  // e.g import('foo.json') from webpack)\n  // See https://github.com/formatjs/formatjs/issues/1914\n  messages && Object.prototype.hasOwnProperty.call(messages, id) && messages[id];\n  // IMPORTANT: Hot path if `message` is AST with a single literal node\n  if (Array.isArray(message) && message.length === 1 && message[0].type === TYPE.literal) {\n    return message[0].value;\n  }\n  // IMPORTANT: Hot path straight lookup for performance\n  if (!values && message && typeof message === 'string' && !defaultRichTextElements) {\n    return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n  }\n  values = __assign(__assign({}, defaultRichTextElements), values || {});\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n  if (!message) {\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      // This prevents warnings from littering the console in development\n      // when no `messages` are passed into the <IntlProvider> for the\n      // default locale.\n      onError(new MissingTranslationError(messageDescriptor, locale));\n    }\n    if (defaultMessage) {\n      try {\n        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n        return formatter.format(values);\n      } catch (e) {\n        onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n        return typeof defaultMessage === 'string' ? defaultMessage : id;\n      }\n    }\n    return id;\n  }\n  // We have the translated message\n  try {\n    var formatter = state.getMessageFormat(message, locale, formats, __assign({\n      formatters: state\n    }, opts || {}));\n    return formatter.format(values);\n  } catch (e) {\n    onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n  }\n  if (defaultMessage) {\n    try {\n      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n      return formatter.format(values);\n    } catch (e) {\n      onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n    }\n  }\n  if (typeof message === 'string') {\n    return message;\n  }\n  if (typeof defaultMessage === 'string') {\n    return defaultMessage;\n  }\n  return id;\n}","map":{"version":3,"names":["__assign","invariant","IntlMessageFormat","MissingTranslationError","MessageFormatError","TYPE","setTimeZoneInOptions","opts","timeZone","Object","keys","reduce","all","k","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","formats","date","time","formatMessage","_a","state","messageDescriptor","values","locale","messages","defaultLocale","defaultFormats","onError","defaultRichTextElements","id","msgId","defaultMessage","String","message","prototype","hasOwnProperty","call","Array","isArray","length","type","literal","value","replace","toLowerCase","formatter","getMessageFormat","format","e","formatters"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/intl/lib/src/message.js"],"sourcesContent":["import { __assign } from \"tslib\";\r\nimport { invariant } from '@formatjs/ecma402-abstract';\r\nimport { IntlMessageFormat, } from 'intl-messageformat';\r\nimport { MissingTranslationError, MessageFormatError } from './error';\r\nimport { TYPE } from '@formatjs/icu-messageformat-parser';\r\nfunction setTimeZoneInOptions(opts, timeZone) {\r\n    return Object.keys(opts).reduce(function (all, k) {\r\n        all[k] = __assign({ timeZone: timeZone }, opts[k]);\r\n        return all;\r\n    }, {});\r\n}\r\nfunction deepMergeOptions(opts1, opts2) {\r\n    var keys = Object.keys(__assign(__assign({}, opts1), opts2));\r\n    return keys.reduce(function (all, k) {\r\n        all[k] = __assign(__assign({}, (opts1[k] || {})), (opts2[k] || {}));\r\n        return all;\r\n    }, {});\r\n}\r\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\r\n    if (!timeZone) {\r\n        return f1;\r\n    }\r\n    var mfFormats = IntlMessageFormat.formats;\r\n    return __assign(__assign(__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\r\n}\r\nexport function formatMessage(_a, state, messageDescriptor, values, opts) {\r\n    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, onError = _a.onError, timeZone = _a.timeZone, defaultRichTextElements = _a.defaultRichTextElements;\r\n    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }\r\n    var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;\r\n    // `id` is a required field of a Message Descriptor.\r\n    invariant(!!msgId, \"[@formatjs/intl] An `id` must be provided to format a message. You can either:\\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\\nto autofix this issue\");\r\n    var id = String(msgId);\r\n    var message = \r\n    // In case messages is Object.create(null)\r\n    // e.g import('foo.json') from webpack)\r\n    // See https://github.com/formatjs/formatjs/issues/1914\r\n    messages &&\r\n        Object.prototype.hasOwnProperty.call(messages, id) &&\r\n        messages[id];\r\n    // IMPORTANT: Hot path if `message` is AST with a single literal node\r\n    if (Array.isArray(message) &&\r\n        message.length === 1 &&\r\n        message[0].type === TYPE.literal) {\r\n        return message[0].value;\r\n    }\r\n    // IMPORTANT: Hot path straight lookup for performance\r\n    if (!values &&\r\n        message &&\r\n        typeof message === 'string' &&\r\n        !defaultRichTextElements) {\r\n        return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\r\n    }\r\n    values = __assign(__assign({}, defaultRichTextElements), (values || {}));\r\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\r\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\r\n    if (!message) {\r\n        if (!defaultMessage ||\r\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\r\n            // This prevents warnings from littering the console in development\r\n            // when no `messages` are passed into the <IntlProvider> for the\r\n            // default locale.\r\n            onError(new MissingTranslationError(messageDescriptor, locale));\r\n        }\r\n        if (defaultMessage) {\r\n            try {\r\n                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\r\n                return formatter.format(values);\r\n            }\r\n            catch (e) {\r\n                onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\r\n                return typeof defaultMessage === 'string' ? defaultMessage : id;\r\n            }\r\n        }\r\n        return id;\r\n    }\r\n    // We have the translated message\r\n    try {\r\n        var formatter = state.getMessageFormat(message, locale, formats, __assign({ formatters: state }, (opts || {})));\r\n        return formatter.format(values);\r\n    }\r\n    catch (e) {\r\n        onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\r\n    }\r\n    if (defaultMessage) {\r\n        try {\r\n            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\r\n            return formatter.format(values);\r\n        }\r\n        catch (e) {\r\n            onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\r\n        }\r\n    }\r\n    if (typeof message === 'string') {\r\n        return message;\r\n    }\r\n    if (typeof defaultMessage === 'string') {\r\n        return defaultMessage;\r\n    }\r\n    return id;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}