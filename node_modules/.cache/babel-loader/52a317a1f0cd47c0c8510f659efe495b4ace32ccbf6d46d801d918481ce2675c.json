{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartitionNumberPattern = void 0;\nvar tslib_1 = require(\"tslib\");\nvar FormatNumericToString_1 = require(\"./FormatNumericToString\");\nvar _262_1 = require(\"../262\");\nvar ComputeExponent_1 = require(\"./ComputeExponent\");\nvar format_to_parts_1 = tslib_1.__importDefault(require(\"./format_to_parts\"));\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nfunction PartitionNumberPattern(numberFormat, x, _a) {\n  var _b;\n  var getInternalSlots = _a.getInternalSlots;\n  var internalSlots = getInternalSlots(numberFormat);\n  var pl = internalSlots.pl,\n    dataLocaleData = internalSlots.dataLocaleData,\n    numberingSystem = internalSlots.numberingSystem;\n  var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n  var magnitude = 0;\n  var exponent = 0;\n  var n;\n  if (isNaN(x)) {\n    n = symbols.nan;\n  } else if (!isFinite(x)) {\n    n = symbols.infinity;\n  } else {\n    if (internalSlots.style === 'percent') {\n      x *= 100;\n    }\n    _b = ComputeExponent_1.ComputeExponent(numberFormat, x, {\n      getInternalSlots: getInternalSlots\n    }), exponent = _b[0], magnitude = _b[1];\n    // Preserve more precision by doing multiplication when exponent is negative.\n    x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n    var formatNumberResult = FormatNumericToString_1.FormatNumericToString(internalSlots, x);\n    n = formatNumberResult.formattedString;\n    x = formatNumberResult.roundedNumber;\n  }\n  // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n  // We need to do this before `x` is rounded.\n  var sign;\n  var signDisplay = internalSlots.signDisplay;\n  switch (signDisplay) {\n    case 'never':\n      sign = 0;\n      break;\n    case 'auto':\n      if (_262_1.SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 0;\n      } else {\n        sign = -1;\n      }\n      break;\n    case 'always':\n      if (_262_1.SameValue(x, 0) || x > 0 || isNaN(x)) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n      break;\n    default:\n      // x === 0 -> x is 0 or x is -0\n      if (x === 0 || isNaN(x)) {\n        sign = 0;\n      } else if (x > 0) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n  }\n  return format_to_parts_1.default({\n    roundedNumber: x,\n    formattedString: n,\n    exponent: exponent,\n    magnitude: magnitude,\n    sign: sign\n  }, internalSlots.dataLocaleData, pl, internalSlots);\n}\nexports.PartitionNumberPattern = PartitionNumberPattern;","map":{"version":3,"names":["Object","defineProperty","exports","value","PartitionNumberPattern","tslib_1","require","FormatNumericToString_1","_262_1","ComputeExponent_1","format_to_parts_1","__importDefault","numberFormat","x","_a","_b","getInternalSlots","internalSlots","pl","dataLocaleData","numberingSystem","symbols","numbers","nu","magnitude","exponent","n","isNaN","nan","isFinite","infinity","style","ComputeExponent","Math","pow","formatNumberResult","FormatNumericToString","formattedString","roundedNumber","sign","signDisplay","SameValue","default"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/intl-relativetimeformat/node_modules/@formatjs/ecma402-abstract/NumberFormat/PartitionNumberPattern.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionNumberPattern = void 0;\nvar tslib_1 = require(\"tslib\");\nvar FormatNumericToString_1 = require(\"./FormatNumericToString\");\nvar _262_1 = require(\"../262\");\nvar ComputeExponent_1 = require(\"./ComputeExponent\");\nvar format_to_parts_1 = tslib_1.__importDefault(require(\"./format_to_parts\"));\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nfunction PartitionNumberPattern(numberFormat, x, _a) {\n    var _b;\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var pl = internalSlots.pl, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    var symbols = dataLocaleData.numbers.symbols[numberingSystem] ||\n        dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n    var magnitude = 0;\n    var exponent = 0;\n    var n;\n    if (isNaN(x)) {\n        n = symbols.nan;\n    }\n    else if (!isFinite(x)) {\n        n = symbols.infinity;\n    }\n    else {\n        if (internalSlots.style === 'percent') {\n            x *= 100;\n        }\n        _b = ComputeExponent_1.ComputeExponent(numberFormat, x, {\n            getInternalSlots: getInternalSlots,\n        }), exponent = _b[0], magnitude = _b[1];\n        // Preserve more precision by doing multiplication when exponent is negative.\n        x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n        var formatNumberResult = FormatNumericToString_1.FormatNumericToString(internalSlots, x);\n        n = formatNumberResult.formattedString;\n        x = formatNumberResult.roundedNumber;\n    }\n    // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern\n    // We need to do this before `x` is rounded.\n    var sign;\n    var signDisplay = internalSlots.signDisplay;\n    switch (signDisplay) {\n        case 'never':\n            sign = 0;\n            break;\n        case 'auto':\n            if (_262_1.SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        case 'always':\n            if (_262_1.SameValue(x, 0) || x > 0 || isNaN(x)) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n            break;\n        default:\n            // x === 0 -> x is 0 or x is -0\n            if (x === 0 || isNaN(x)) {\n                sign = 0;\n            }\n            else if (x > 0) {\n                sign = 1;\n            }\n            else {\n                sign = -1;\n            }\n    }\n    return format_to_parts_1.default({ roundedNumber: x, formattedString: n, exponent: exponent, magnitude: magnitude, sign: sign }, internalSlots.dataLocaleData, pl, internalSlots);\n}\nexports.PartitionNumberPattern = PartitionNumberPattern;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}