{"ast":null,"code":"import { repeat, getMagnitude } from '../utils';\nexport function ToRawPrecision(x, minPrecision, maxPrecision) {\n  var p = maxPrecision;\n  var m;\n  var e;\n  var xFinal;\n  if (x === 0) {\n    m = repeat('0', p);\n    e = 0;\n    xFinal = 0;\n  } else {\n    var xToString = x.toString();\n    // If xToString is formatted as scientific notation, the number is either very small or very\n    // large. If the precision of the formatted string is lower that requested max precision, we\n    // should still infer them from the formatted string, otherwise the formatted result might have\n    // precision loss (e.g. 1e41 will not have 0 in every trailing digits).\n    var xToStringExponentIndex = xToString.indexOf('e');\n    var _a = xToString.split('e'),\n      xToStringMantissa = _a[0],\n      xToStringExponent = _a[1];\n    var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');\n    if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {\n      e = +xToStringExponent;\n      m = xToStringMantissaWithoutDecimalPoint + repeat('0', p - xToStringMantissaWithoutDecimalPoint.length);\n      xFinal = x;\n    } else {\n      e = getMagnitude(x);\n      var decimalPlaceOffset = e - p + 1;\n      // n is the integer containing the required precision digits. To derive the formatted string,\n      // we will adjust its decimal place in the logic below.\n      var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset));\n      // The rounding caused the change of magnitude, so we should increment `e` by 1.\n      if (adjustDecimalPlace(n, p - 1) >= 10) {\n        e = e + 1;\n        // Divide n by 10 to swallow one precision.\n        n = Math.floor(n / 10);\n      }\n      m = n.toString();\n      // Equivalent of n * 10 ** (e - p + 1)\n      xFinal = adjustDecimalPlace(n, p - 1 - e);\n    }\n  }\n  var int;\n  if (e >= p - 1) {\n    m = m + repeat('0', e - p + 1);\n    int = e + 1;\n  } else if (e >= 0) {\n    m = m.slice(0, e + 1) + \".\" + m.slice(e + 1);\n    int = e + 1;\n  } else {\n    m = \"0.\" + repeat('0', -e - 1) + m;\n    int = 1;\n  }\n  if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {\n    var cut = maxPrecision - minPrecision;\n    while (cut > 0 && m[m.length - 1] === '0') {\n      m = m.slice(0, -1);\n      cut--;\n    }\n    if (m[m.length - 1] === '.') {\n      m = m.slice(0, -1);\n    }\n  }\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  };\n  // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.\n  function adjustDecimalPlace(x, magnitude) {\n    return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);\n  }\n}","map":{"version":3,"names":["repeat","getMagnitude","ToRawPrecision","x","minPrecision","maxPrecision","p","m","e","xFinal","xToString","toString","xToStringExponentIndex","indexOf","_a","split","xToStringMantissa","xToStringExponent","xToStringMantissaWithoutDecimalPoint","replace","length","decimalPlaceOffset","n","Math","round","adjustDecimalPlace","floor","int","slice","cut","formattedString","roundedNumber","integerDigitsCount","magnitude","pow"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/intl/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawPrecision.js"],"sourcesContent":["import { repeat, getMagnitude } from '../utils';\r\nexport function ToRawPrecision(x, minPrecision, maxPrecision) {\r\n    var p = maxPrecision;\r\n    var m;\r\n    var e;\r\n    var xFinal;\r\n    if (x === 0) {\r\n        m = repeat('0', p);\r\n        e = 0;\r\n        xFinal = 0;\r\n    }\r\n    else {\r\n        var xToString = x.toString();\r\n        // If xToString is formatted as scientific notation, the number is either very small or very\r\n        // large. If the precision of the formatted string is lower that requested max precision, we\r\n        // should still infer them from the formatted string, otherwise the formatted result might have\r\n        // precision loss (e.g. 1e41 will not have 0 in every trailing digits).\r\n        var xToStringExponentIndex = xToString.indexOf('e');\r\n        var _a = xToString.split('e'), xToStringMantissa = _a[0], xToStringExponent = _a[1];\r\n        var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');\r\n        if (xToStringExponentIndex >= 0 &&\r\n            xToStringMantissaWithoutDecimalPoint.length <= p) {\r\n            e = +xToStringExponent;\r\n            m =\r\n                xToStringMantissaWithoutDecimalPoint +\r\n                    repeat('0', p - xToStringMantissaWithoutDecimalPoint.length);\r\n            xFinal = x;\r\n        }\r\n        else {\r\n            e = getMagnitude(x);\r\n            var decimalPlaceOffset = e - p + 1;\r\n            // n is the integer containing the required precision digits. To derive the formatted string,\r\n            // we will adjust its decimal place in the logic below.\r\n            var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset));\r\n            // The rounding caused the change of magnitude, so we should increment `e` by 1.\r\n            if (adjustDecimalPlace(n, p - 1) >= 10) {\r\n                e = e + 1;\r\n                // Divide n by 10 to swallow one precision.\r\n                n = Math.floor(n / 10);\r\n            }\r\n            m = n.toString();\r\n            // Equivalent of n * 10 ** (e - p + 1)\r\n            xFinal = adjustDecimalPlace(n, p - 1 - e);\r\n        }\r\n    }\r\n    var int;\r\n    if (e >= p - 1) {\r\n        m = m + repeat('0', e - p + 1);\r\n        int = e + 1;\r\n    }\r\n    else if (e >= 0) {\r\n        m = m.slice(0, e + 1) + \".\" + m.slice(e + 1);\r\n        int = e + 1;\r\n    }\r\n    else {\r\n        m = \"0.\" + repeat('0', -e - 1) + m;\r\n        int = 1;\r\n    }\r\n    if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {\r\n        var cut = maxPrecision - minPrecision;\r\n        while (cut > 0 && m[m.length - 1] === '0') {\r\n            m = m.slice(0, -1);\r\n            cut--;\r\n        }\r\n        if (m[m.length - 1] === '.') {\r\n            m = m.slice(0, -1);\r\n        }\r\n    }\r\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\r\n    // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.\r\n    function adjustDecimalPlace(x, magnitude) {\r\n        return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}