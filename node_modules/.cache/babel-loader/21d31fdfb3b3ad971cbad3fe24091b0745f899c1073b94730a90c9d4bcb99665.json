{"ast":null,"code":"/**\r\n * This action type will be dispatched when your history\r\n * receives a location change.\r\n */\nexport var LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\nexport var onLocationChanged = function onLocationChanged(location, action) {\n  var isFirstRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    type: LOCATION_CHANGE,\n    payload: {\n      location: location,\n      action: action,\n      isFirstRendering: isFirstRendering\n    }\n  };\n};\n/**\r\n * This action type will be dispatched by the history actions below.\r\n * If you're writing a middleware to watch for navigation events, be sure to\r\n * look for actions of this type.\r\n */\n\nexport var CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\nvar updateLocation = function updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: {\n        method: method,\n        args: args\n      }\n    };\n  };\n};\n/**\r\n * These actions correspond to the history API.\r\n * The associated routerMiddleware will capture these events before they get to\r\n * your reducer and reissue them as the matching function on your history.\r\n */\n\nexport var push = updateLocation('push');\nexport var replace = updateLocation('replace');\nexport var go = updateLocation('go');\nexport var goBack = updateLocation('goBack');\nexport var goForward = updateLocation('goForward');\nexport var routerActions = {\n  push: push,\n  replace: replace,\n  go: go,\n  goBack: goBack,\n  goForward: goForward\n};","map":{"version":3,"names":["LOCATION_CHANGE","onLocationChanged","location","action","isFirstRendering","arguments","length","undefined","type","payload","CALL_HISTORY_METHOD","updateLocation","method","_len","args","Array","_key","push","replace","go","goBack","goForward","routerActions"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/connected-react-router/esm/actions.js"],"sourcesContent":["/**\r\n * This action type will be dispatched when your history\r\n * receives a location change.\r\n */\r\nexport var LOCATION_CHANGE = '@@router/LOCATION_CHANGE';\r\nexport var onLocationChanged = function onLocationChanged(location, action) {\r\n  var isFirstRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n  return {\r\n    type: LOCATION_CHANGE,\r\n    payload: {\r\n      location: location,\r\n      action: action,\r\n      isFirstRendering: isFirstRendering\r\n    }\r\n  };\r\n};\r\n/**\r\n * This action type will be dispatched by the history actions below.\r\n * If you're writing a middleware to watch for navigation events, be sure to\r\n * look for actions of this type.\r\n */\r\n\r\nexport var CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\r\n\r\nvar updateLocation = function updateLocation(method) {\r\n  return function () {\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    return {\r\n      type: CALL_HISTORY_METHOD,\r\n      payload: {\r\n        method: method,\r\n        args: args\r\n      }\r\n    };\r\n  };\r\n};\r\n/**\r\n * These actions correspond to the history API.\r\n * The associated routerMiddleware will capture these events before they get to\r\n * your reducer and reissue them as the matching function on your history.\r\n */\r\n\r\n\r\nexport var push = updateLocation('push');\r\nexport var replace = updateLocation('replace');\r\nexport var go = updateLocation('go');\r\nexport var goBack = updateLocation('goBack');\r\nexport var goForward = updateLocation('goForward');\r\nexport var routerActions = {\r\n  push: push,\r\n  replace: replace,\r\n  go: go,\r\n  goBack: goBack,\r\n  goForward: goForward\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,IAAIA,eAAe,GAAG,0BAA0B;AACvD,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAC1E,IAAIC,gBAAgB,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;EAChG,OAAO;IACLG,IAAI,EAAER,eAAe;IACrBS,OAAO,EAAE;MACPP,QAAQ,EAAEA,QAAQ;MAClBC,MAAM,EAAEA,MAAM;MACdC,gBAAgB,EAAEA;IACpB;EACF,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIM,mBAAmB,GAAG,8BAA8B;AAE/D,IAAIC,cAAc,GAAG,SAASA,cAAcA,CAACC,MAAM,EAAE;EACnD,OAAO,YAAY;IACjB,KAAK,IAAIC,IAAI,GAAGR,SAAS,CAACC,MAAM,EAAEQ,IAAI,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC,EAAEG,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGH,IAAI,EAAEG,IAAI,EAAE,EAAE;MACvFF,IAAI,CAACE,IAAI,CAAC,GAAGX,SAAS,CAACW,IAAI,CAAC;IAC9B;IAEA,OAAO;MACLR,IAAI,EAAEE,mBAAmB;MACzBD,OAAO,EAAE;QACPG,MAAM,EAAEA,MAAM;QACdE,IAAI,EAAEA;MACR;IACF,CAAC;EACH,CAAC;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;;AAGA,OAAO,IAAIG,IAAI,GAAGN,cAAc,CAAC,MAAM,CAAC;AACxC,OAAO,IAAIO,OAAO,GAAGP,cAAc,CAAC,SAAS,CAAC;AAC9C,OAAO,IAAIQ,EAAE,GAAGR,cAAc,CAAC,IAAI,CAAC;AACpC,OAAO,IAAIS,MAAM,GAAGT,cAAc,CAAC,QAAQ,CAAC;AAC5C,OAAO,IAAIU,SAAS,GAAGV,cAAc,CAAC,WAAW,CAAC;AAClD,OAAO,IAAIW,aAAa,GAAG;EACzBL,IAAI,EAAEA,IAAI;EACVC,OAAO,EAAEA,OAAO;EAChBC,EAAE,EAAEA,EAAE;EACNC,MAAM,EAAEA,MAAM;EACdC,SAAS,EAAEA;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}