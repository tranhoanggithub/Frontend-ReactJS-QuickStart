{"ast":null,"code":"import { invariant } from './utils';\n/**\r\n * https://tc39.es/ecma402/#sec-partitionpattern\r\n * @param pattern\r\n */\nexport function PartitionPattern(pattern) {\n  var result = [];\n  var beginIndex = pattern.indexOf('{');\n  var endIndex = 0;\n  var nextIndex = 0;\n  var length = pattern.length;\n  while (beginIndex < pattern.length && beginIndex > -1) {\n    endIndex = pattern.indexOf('}', beginIndex);\n    invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\n    if (beginIndex > nextIndex) {\n      result.push({\n        type: 'literal',\n        value: pattern.substring(nextIndex, beginIndex)\n      });\n    }\n    result.push({\n      type: pattern.substring(beginIndex + 1, endIndex),\n      value: undefined\n    });\n    nextIndex = endIndex + 1;\n    beginIndex = pattern.indexOf('{', nextIndex);\n  }\n  if (nextIndex < length) {\n    result.push({\n      type: 'literal',\n      value: pattern.substring(nextIndex, length)\n    });\n  }\n  return result;\n}","map":{"version":3,"names":["invariant","PartitionPattern","pattern","result","beginIndex","indexOf","endIndex","nextIndex","length","push","type","value","substring","undefined"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/react-intl/node_modules/@formatjs/ecma402-abstract/lib/PartitionPattern.js"],"sourcesContent":["import { invariant } from './utils';\r\n/**\r\n * https://tc39.es/ecma402/#sec-partitionpattern\r\n * @param pattern\r\n */\r\nexport function PartitionPattern(pattern) {\r\n    var result = [];\r\n    var beginIndex = pattern.indexOf('{');\r\n    var endIndex = 0;\r\n    var nextIndex = 0;\r\n    var length = pattern.length;\r\n    while (beginIndex < pattern.length && beginIndex > -1) {\r\n        endIndex = pattern.indexOf('}', beginIndex);\r\n        invariant(endIndex > beginIndex, \"Invalid pattern \" + pattern);\r\n        if (beginIndex > nextIndex) {\r\n            result.push({\r\n                type: 'literal',\r\n                value: pattern.substring(nextIndex, beginIndex),\r\n            });\r\n        }\r\n        result.push({\r\n            type: pattern.substring(beginIndex + 1, endIndex),\r\n            value: undefined,\r\n        });\r\n        nextIndex = endIndex + 1;\r\n        beginIndex = pattern.indexOf('{', nextIndex);\r\n    }\r\n    if (nextIndex < length) {\r\n        result.push({\r\n            type: 'literal',\r\n            value: pattern.substring(nextIndex, length),\r\n        });\r\n    }\r\n    return result;\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,SAAS;AACnC;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EACtC,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAGF,OAAO,CAACG,OAAO,CAAC,GAAG,CAAC;EACrC,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,MAAM,GAAGN,OAAO,CAACM,MAAM;EAC3B,OAAOJ,UAAU,GAAGF,OAAO,CAACM,MAAM,IAAIJ,UAAU,GAAG,CAAC,CAAC,EAAE;IACnDE,QAAQ,GAAGJ,OAAO,CAACG,OAAO,CAAC,GAAG,EAAED,UAAU,CAAC;IAC3CJ,SAAS,CAACM,QAAQ,GAAGF,UAAU,EAAE,kBAAkB,GAAGF,OAAO,CAAC;IAC9D,IAAIE,UAAU,GAAGG,SAAS,EAAE;MACxBJ,MAAM,CAACM,IAAI,CAAC;QACRC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAET,OAAO,CAACU,SAAS,CAACL,SAAS,EAAEH,UAAU;MAClD,CAAC,CAAC;IACN;IACAD,MAAM,CAACM,IAAI,CAAC;MACRC,IAAI,EAAER,OAAO,CAACU,SAAS,CAACR,UAAU,GAAG,CAAC,EAAEE,QAAQ,CAAC;MACjDK,KAAK,EAAEE;IACX,CAAC,CAAC;IACFN,SAAS,GAAGD,QAAQ,GAAG,CAAC;IACxBF,UAAU,GAAGF,OAAO,CAACG,OAAO,CAAC,GAAG,EAAEE,SAAS,CAAC;EAChD;EACA,IAAIA,SAAS,GAAGC,MAAM,EAAE;IACpBL,MAAM,CAACM,IAAI,CAAC;MACRC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAET,OAAO,CAACU,SAAS,CAACL,SAAS,EAAEC,MAAM;IAC9C,CAAC,CAAC;EACN;EACA,OAAOL,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}