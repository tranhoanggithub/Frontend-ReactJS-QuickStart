{"ast":null,"code":"import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\nconst locationHelper = locationHelperBuilder({});\nexport const userIsAuthenticated = connectedRouterRedirect({\n  authenticatedSelector: state => state.user.isLoggedIn,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  redirectPath: '/login'\n});\nexport const userIsNotAuthenticated = connectedRouterRedirect({\n  // Want to redirect the user when they are authenticated\n  authenticatedSelector: state => !state.user.isLoggedIn,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/',\n  allowRedirectBack: false\n});","map":{"version":3,"sources":["/Users/macbook/Desktop/Frontend-ReactJS-QuickStart/src/hoc/authentication.js"],"names":["locationHelperBuilder","connectedRouterRedirect","locationHelper","userIsAuthenticated","authenticatedSelector","state","user","isLoggedIn","wrapperDisplayName","redirectPath","userIsNotAuthenticated","ownProps","getRedirectQueryParam","allowRedirectBack"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,4CAAlC;AACA,SAASC,uBAAT,QAAwC,sCAAxC;AAEA,MAAMC,cAAc,GAAGF,qBAAqB,CAAC,EAAD,CAA5C;AAEA,OAAO,MAAMG,mBAAmB,GAAGF,uBAAuB,CAAC;AACvDG,EAAAA,qBAAqB,EAAEC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,UADY;AAEvDC,EAAAA,kBAAkB,EAAE,qBAFmC;AAGvDC,EAAAA,YAAY,EAAE;AAHyC,CAAD,CAAnD;AAMP,OAAO,MAAMC,sBAAsB,GAAGT,uBAAuB,CAAC;AAC1D;AACAG,EAAAA,qBAAqB,EAAEC,KAAK,IAAI,CAACA,KAAK,CAACC,IAAN,CAAWC,UAFc;AAG1DC,EAAAA,kBAAkB,EAAE,wBAHsC;AAI1DC,EAAAA,YAAY,EAAE,CAACJ,KAAD,EAAQM,QAAR,KAAqBT,cAAc,CAACU,qBAAf,CAAqCD,QAArC,KAAkD,GAJ3B;AAK1DE,EAAAA,iBAAiB,EAAE;AALuC,CAAD,CAAtD","sourcesContent":["import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\n\nconst locationHelper = locationHelperBuilder({});\n\nexport const userIsAuthenticated = connectedRouterRedirect({\n    authenticatedSelector: state => state.user.isLoggedIn,\n    wrapperDisplayName: 'UserIsAuthenticated',\n    redirectPath: '/login'\n});\n\nexport const userIsNotAuthenticated = connectedRouterRedirect({\n    // Want to redirect the user when they are authenticated\n    authenticatedSelector: state => !state.user.isLoggedIn,\n    wrapperDisplayName: 'UserIsNotAuthenticated',\n    redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/',\n    allowRedirectBack: false\n});"]},"metadata":{},"sourceType":"module"}