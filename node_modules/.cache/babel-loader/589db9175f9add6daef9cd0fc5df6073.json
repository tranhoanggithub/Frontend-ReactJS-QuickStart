{"ast":null,"code":"import { logger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\nimport { persistStore } from 'redux-persist';\nimport createRootReducer from './store/reducers/rootReducer';\nimport actionTypes from './store/actions/actionTypes';\nconst environment = process.env.NODE_ENV || \"development\";\nlet isDevelopment = environment === \"development\"; //hide redux logs\n\nisDevelopment = false;\nexport const history = createBrowserHistory({\n  basename: process.env.REACT_APP_ROUTER_BASE_NAME\n});\nconst reduxStateSyncConfig = {\n  whitelist: [actionTypes.APP_START_UP_COMPLETE]\n};\nconst rootReducer = createRootReducer(history);\nconst middleware = [routerMiddleware(history), thunkMiddleware, createStateSyncMiddleware(reduxStateSyncConfig)];\nif (isDevelopment) middleware.push(logger);\nconst composeEnhancers = isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\nconst reduxStore = createStore(rootReducer, composeEnhancers(applyMiddleware(...middleware)));\nexport const dispatch = reduxStore.dispatch;\nexport const persistor = persistStore(reduxStore);\nexport default reduxStore;","map":{"version":3,"sources":["/Users/macbook/Desktop/Frontend-ReactJS-QuickStart/src/redux.js"],"names":["logger","thunkMiddleware","routerMiddleware","createBrowserHistory","createStore","applyMiddleware","compose","createStateSyncMiddleware","persistStore","createRootReducer","actionTypes","environment","process","env","NODE_ENV","isDevelopment","history","basename","REACT_APP_ROUTER_BASE_NAME","reduxStateSyncConfig","whitelist","APP_START_UP_COMPLETE","rootReducer","middleware","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reduxStore","dispatch","persistor"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,aAA5C;AACA,IAAIC,aAAa,GAAGJ,WAAW,KAAK,aAApC,C,CAEA;;AACAI,aAAa,GAAG,KAAhB;AAGA,OAAO,MAAMC,OAAO,GAAGb,oBAAoB,CAAC;AAAEc,EAAAA,QAAQ,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAAxB,CAAD,CAApC;AAEP,MAAMC,oBAAoB,GAAG;AACzBC,EAAAA,SAAS,EAAE,CACPV,WAAW,CAACW,qBADL;AADc,CAA7B;AAMA,MAAMC,WAAW,GAAGb,iBAAiB,CAACO,OAAD,CAArC;AACA,MAAMO,UAAU,GAAG,CACfrB,gBAAgB,CAACc,OAAD,CADD,EAEff,eAFe,EAGfM,yBAAyB,CAACY,oBAAD,CAHV,CAAnB;AAKA,IAAIJ,aAAJ,EAAmBQ,UAAU,CAACC,IAAX,CAAgBxB,MAAhB;AAEnB,MAAMyB,gBAAgB,GAAIV,aAAa,IAAIW,MAAM,CAACC,oCAAzB,GAAiED,MAAM,CAACC,oCAAxE,GAA+GrB,OAAxI;AAEA,MAAMsB,UAAU,GAAGxB,WAAW,CAC1BkB,WAD0B,EAE1BG,gBAAgB,CAACpB,eAAe,CAAC,GAAGkB,UAAJ,CAAhB,CAFU,CAA9B;AAKA,OAAO,MAAMM,QAAQ,GAAGD,UAAU,CAACC,QAA5B;AAEP,OAAO,MAAMC,SAAS,GAAGtB,YAAY,CAACoB,UAAD,CAA9B;AAEP,eAAeA,UAAf","sourcesContent":["import { logger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { createStateSyncMiddleware } from 'redux-state-sync';\nimport { persistStore } from 'redux-persist';\n\nimport createRootReducer from './store/reducers/rootReducer';\nimport actionTypes from './store/actions/actionTypes';\n\nconst environment = process.env.NODE_ENV || \"development\";\nlet isDevelopment = environment === \"development\";\n\n//hide redux logs\nisDevelopment = false;\n\n\nexport const history = createBrowserHistory({ basename: process.env.REACT_APP_ROUTER_BASE_NAME });\n\nconst reduxStateSyncConfig = {\n    whitelist: [\n        actionTypes.APP_START_UP_COMPLETE,\n    ]\n}\n\nconst rootReducer = createRootReducer(history);\nconst middleware = [\n    routerMiddleware(history),\n    thunkMiddleware,\n    createStateSyncMiddleware(reduxStateSyncConfig),\n]\nif (isDevelopment) middleware.push(logger);\n\nconst composeEnhancers = (isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\n\nconst reduxStore = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(...middleware)),\n)\n\nexport const dispatch = reduxStore.dispatch;\n\nexport const persistor = persistStore(reduxStore);\n\nexport default reduxStore;"]},"metadata":{},"sourceType":"module"}