{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToLocalTime = void 0;\nvar utils_1 = require(\"../utils\");\nvar _262_1 = require(\"../262\");\nfunction getApplicableZoneData(t, timeZone, tzData) {\n  var _a;\n  var zoneData = tzData[timeZone];\n  // We don't have data for this so just say it's UTC\n  if (!zoneData) {\n    return [0, false];\n  }\n  var i = 0;\n  var offset = 0;\n  var dst = false;\n  for (; i <= zoneData.length; i++) {\n    if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n      _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n      break;\n    }\n  }\n  return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\nfunction ToLocalTime(t, calendar, timeZone, _a) {\n  var tzData = _a.tzData;\n  utils_1.invariant(_262_1.Type(t) === 'Number', 'invalid time');\n  utils_1.invariant(calendar === 'gregory', 'We only support Gregory calendar right now');\n  var _b = getApplicableZoneData(t, timeZone, tzData),\n    timeZoneOffset = _b[0],\n    inDST = _b[1];\n  var tz = t + timeZoneOffset;\n  var year = _262_1.YearFromTime(tz);\n  return {\n    weekday: _262_1.WeekDay(tz),\n    era: year < 0 ? 'BC' : 'AD',\n    year: year,\n    relatedYear: undefined,\n    yearName: undefined,\n    month: _262_1.MonthFromTime(tz),\n    day: _262_1.DateFromTime(tz),\n    hour: _262_1.HourFromTime(tz),\n    minute: _262_1.MinFromTime(tz),\n    second: _262_1.SecFromTime(tz),\n    inDST: inDST,\n    // IMPORTANT: Not in spec\n    timeZoneOffset: timeZoneOffset\n  };\n}\nexports.ToLocalTime = ToLocalTime;","map":{"version":3,"names":["Object","defineProperty","exports","value","ToLocalTime","utils_1","require","_262_1","getApplicableZoneData","t","timeZone","tzData","_a","zoneData","i","offset","dst","length","calendar","invariant","Type","_b","timeZoneOffset","inDST","tz","year","YearFromTime","weekday","WeekDay","era","relatedYear","undefined","yearName","month","MonthFromTime","day","DateFromTime","hour","HourFromTime","minute","MinFromTime","second","SecFromTime"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/intl-pluralrules/node_modules/@formatjs/ecma402-abstract/DateTimeFormat/ToLocalTime.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToLocalTime = void 0;\nvar utils_1 = require(\"../utils\");\nvar _262_1 = require(\"../262\");\nfunction getApplicableZoneData(t, timeZone, tzData) {\n    var _a;\n    var zoneData = tzData[timeZone];\n    // We don't have data for this so just say it's UTC\n    if (!zoneData) {\n        return [0, false];\n    }\n    var i = 0;\n    var offset = 0;\n    var dst = false;\n    for (; i <= zoneData.length; i++) {\n        if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n            _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n            break;\n        }\n    }\n    return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\nfunction ToLocalTime(t, calendar, timeZone, _a) {\n    var tzData = _a.tzData;\n    utils_1.invariant(_262_1.Type(t) === 'Number', 'invalid time');\n    utils_1.invariant(calendar === 'gregory', 'We only support Gregory calendar right now');\n    var _b = getApplicableZoneData(t, timeZone, tzData), timeZoneOffset = _b[0], inDST = _b[1];\n    var tz = t + timeZoneOffset;\n    var year = _262_1.YearFromTime(tz);\n    return {\n        weekday: _262_1.WeekDay(tz),\n        era: year < 0 ? 'BC' : 'AD',\n        year: year,\n        relatedYear: undefined,\n        yearName: undefined,\n        month: _262_1.MonthFromTime(tz),\n        day: _262_1.DateFromTime(tz),\n        hour: _262_1.HourFromTime(tz),\n        minute: _262_1.MinFromTime(tz),\n        second: _262_1.SecFromTime(tz),\n        inDST: inDST,\n        // IMPORTANT: Not in spec\n        timeZoneOffset: timeZoneOffset,\n    };\n}\nexports.ToLocalTime = ToLocalTime;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACjC,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC9B,SAASE,qBAAqBA,CAACC,CAAC,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EAChD,IAAIC,EAAE;EACN,IAAIC,QAAQ,GAAGF,MAAM,CAACD,QAAQ,CAAC;EAC/B;EACA,IAAI,CAACG,QAAQ,EAAE;IACX,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC;EACrB;EACA,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,GAAG,GAAG,KAAK;EACf,OAAOF,CAAC,IAAID,QAAQ,CAACI,MAAM,EAAEH,CAAC,EAAE,EAAE;IAC9B,IAAIA,CAAC,KAAKD,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGL,CAAC,EAAE;MACnDG,EAAE,GAAGC,QAAQ,CAACC,CAAC,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAGH,EAAE,CAAC,CAAC,CAAC,EAAEI,GAAG,GAAGJ,EAAE,CAAC,CAAC,CAAC;MACjD;IACJ;EACJ;EACA,OAAO,CAACG,MAAM,GAAG,GAAG,EAAEC,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASZ,WAAWA,CAACK,CAAC,EAAES,QAAQ,EAAER,QAAQ,EAAEE,EAAE,EAAE;EAC5C,IAAID,MAAM,GAAGC,EAAE,CAACD,MAAM;EACtBN,OAAO,CAACc,SAAS,CAACZ,MAAM,CAACa,IAAI,CAACX,CAAC,CAAC,KAAK,QAAQ,EAAE,cAAc,CAAC;EAC9DJ,OAAO,CAACc,SAAS,CAACD,QAAQ,KAAK,SAAS,EAAE,4CAA4C,CAAC;EACvF,IAAIG,EAAE,GAAGb,qBAAqB,CAACC,CAAC,EAAEC,QAAQ,EAAEC,MAAM,CAAC;IAAEW,cAAc,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,KAAK,GAAGF,EAAE,CAAC,CAAC,CAAC;EAC1F,IAAIG,EAAE,GAAGf,CAAC,GAAGa,cAAc;EAC3B,IAAIG,IAAI,GAAGlB,MAAM,CAACmB,YAAY,CAACF,EAAE,CAAC;EAClC,OAAO;IACHG,OAAO,EAAEpB,MAAM,CAACqB,OAAO,CAACJ,EAAE,CAAC;IAC3BK,GAAG,EAAEJ,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI;IAC3BA,IAAI,EAAEA,IAAI;IACVK,WAAW,EAAEC,SAAS;IACtBC,QAAQ,EAAED,SAAS;IACnBE,KAAK,EAAE1B,MAAM,CAAC2B,aAAa,CAACV,EAAE,CAAC;IAC/BW,GAAG,EAAE5B,MAAM,CAAC6B,YAAY,CAACZ,EAAE,CAAC;IAC5Ba,IAAI,EAAE9B,MAAM,CAAC+B,YAAY,CAACd,EAAE,CAAC;IAC7Be,MAAM,EAAEhC,MAAM,CAACiC,WAAW,CAAChB,EAAE,CAAC;IAC9BiB,MAAM,EAAElC,MAAM,CAACmC,WAAW,CAAClB,EAAE,CAAC;IAC9BD,KAAK,EAAEA,KAAK;IACZ;IACAD,cAAc,EAAEA;EACpB,CAAC;AACL;AACApB,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}