{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComputeExponent = void 0;\nvar utils_1 = require(\"../utils\");\nvar ComputeExponentForMagnitude_1 = require(\"./ComputeExponentForMagnitude\");\nvar FormatNumericToString_1 = require(\"./FormatNumericToString\");\n/**\n * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x\n * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,\n * requiring a different exponent.\n *\n * NOT IN SPEC: it returns [exponent, magnitude].\n */\nfunction ComputeExponent(numberFormat, x, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  if (x === 0) {\n    return [0, 0];\n  }\n  if (x < 0) {\n    x = -x;\n  }\n  var magnitude = utils_1.getMagnitude(x);\n  var exponent = ComputeExponentForMagnitude_1.ComputeExponentForMagnitude(numberFormat, magnitude, {\n    getInternalSlots: getInternalSlots\n  });\n  // Preserve more precision by doing multiplication when exponent is negative.\n  x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n  var formatNumberResult = FormatNumericToString_1.FormatNumericToString(getInternalSlots(numberFormat), x);\n  if (formatNumberResult.roundedNumber === 0) {\n    return [exponent, magnitude];\n  }\n  var newMagnitude = utils_1.getMagnitude(formatNumberResult.roundedNumber);\n  if (newMagnitude === magnitude - exponent) {\n    return [exponent, magnitude];\n  }\n  return [ComputeExponentForMagnitude_1.ComputeExponentForMagnitude(numberFormat, magnitude + 1, {\n    getInternalSlots: getInternalSlots\n  }), magnitude + 1];\n}\nexports.ComputeExponent = ComputeExponent;","map":{"version":3,"names":["Object","defineProperty","exports","value","ComputeExponent","utils_1","require","ComputeExponentForMagnitude_1","FormatNumericToString_1","numberFormat","x","_a","getInternalSlots","magnitude","getMagnitude","exponent","ComputeExponentForMagnitude","Math","pow","formatNumberResult","FormatNumericToString","roundedNumber","newMagnitude"],"sources":["C:/Users/Admin/Desktop/LEARN REACTJS/Frontend-ReactJS-QuickStart/node_modules/@formatjs/intl-relativetimeformat/node_modules/@formatjs/ecma402-abstract/NumberFormat/ComputeExponent.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComputeExponent = void 0;\nvar utils_1 = require(\"../utils\");\nvar ComputeExponentForMagnitude_1 = require(\"./ComputeExponentForMagnitude\");\nvar FormatNumericToString_1 = require(\"./FormatNumericToString\");\n/**\n * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x\n * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,\n * requiring a different exponent.\n *\n * NOT IN SPEC: it returns [exponent, magnitude].\n */\nfunction ComputeExponent(numberFormat, x, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    if (x === 0) {\n        return [0, 0];\n    }\n    if (x < 0) {\n        x = -x;\n    }\n    var magnitude = utils_1.getMagnitude(x);\n    var exponent = ComputeExponentForMagnitude_1.ComputeExponentForMagnitude(numberFormat, magnitude, {\n        getInternalSlots: getInternalSlots,\n    });\n    // Preserve more precision by doing multiplication when exponent is negative.\n    x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);\n    var formatNumberResult = FormatNumericToString_1.FormatNumericToString(getInternalSlots(numberFormat), x);\n    if (formatNumberResult.roundedNumber === 0) {\n        return [exponent, magnitude];\n    }\n    var newMagnitude = utils_1.getMagnitude(formatNumberResult.roundedNumber);\n    if (newMagnitude === magnitude - exponent) {\n        return [exponent, magnitude];\n    }\n    return [\n        ComputeExponentForMagnitude_1.ComputeExponentForMagnitude(numberFormat, magnitude + 1, {\n            getInternalSlots: getInternalSlots,\n        }),\n        magnitude + 1,\n    ];\n}\nexports.ComputeExponent = ComputeExponent;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACjC,IAAIC,6BAA6B,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AAC5E,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,eAAeA,CAACK,YAAY,EAAEC,CAAC,EAAEC,EAAE,EAAE;EAC1C,IAAIC,gBAAgB,GAAGD,EAAE,CAACC,gBAAgB;EAC1C,IAAIF,CAAC,KAAK,CAAC,EAAE;IACT,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACjB;EACA,IAAIA,CAAC,GAAG,CAAC,EAAE;IACPA,CAAC,GAAG,CAACA,CAAC;EACV;EACA,IAAIG,SAAS,GAAGR,OAAO,CAACS,YAAY,CAACJ,CAAC,CAAC;EACvC,IAAIK,QAAQ,GAAGR,6BAA6B,CAACS,2BAA2B,CAACP,YAAY,EAAEI,SAAS,EAAE;IAC9FD,gBAAgB,EAAEA;EACtB,CAAC,CAAC;EACF;EACAF,CAAC,GAAGK,QAAQ,GAAG,CAAC,GAAGL,CAAC,GAAGO,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAACH,QAAQ,CAAC,GAAGL,CAAC,GAAGO,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEH,QAAQ,CAAC;EAC3E,IAAII,kBAAkB,GAAGX,uBAAuB,CAACY,qBAAqB,CAACR,gBAAgB,CAACH,YAAY,CAAC,EAAEC,CAAC,CAAC;EACzG,IAAIS,kBAAkB,CAACE,aAAa,KAAK,CAAC,EAAE;IACxC,OAAO,CAACN,QAAQ,EAAEF,SAAS,CAAC;EAChC;EACA,IAAIS,YAAY,GAAGjB,OAAO,CAACS,YAAY,CAACK,kBAAkB,CAACE,aAAa,CAAC;EACzE,IAAIC,YAAY,KAAKT,SAAS,GAAGE,QAAQ,EAAE;IACvC,OAAO,CAACA,QAAQ,EAAEF,SAAS,CAAC;EAChC;EACA,OAAO,CACHN,6BAA6B,CAACS,2BAA2B,CAACP,YAAY,EAAEI,SAAS,GAAG,CAAC,EAAE;IACnFD,gBAAgB,EAAEA;EACtB,CAAC,CAAC,EACFC,SAAS,GAAG,CAAC,CAChB;AACL;AACAX,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}